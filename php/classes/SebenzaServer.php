<?php
/**
 * Created by PhpStorm
 * Date: 2016/02/15
 * Time: 1:16 AM
 */
include_once $_SERVER['DOCUMENT_ROOT']."/php/classes/Session.php";
include_once $_SERVER['DOCUMENT_ROOT'] . "/php/classes/DatabaseHandler.php";
class SebenzaServer {
    //Take note a method has been added to add to security please just check it out and use it in your methods that you make, I will refactor them into the other applicable methods there may be one or two that won't
    //use it like login
    public static function start() {
        //Used in open-html.php and AJAX handling below
        //Start output buffering - server only sends the output once per page vs for every "echo" or "print" command
        ob_start();
        //Set the server's default timezone - time is important for many of php's functions
        if (date_default_timezone_get()!=="Africa/Johannesburg") {
            date_default_timezone_set("Africa/Johannesburg");
        }
    }

    public static function stop() {
        //Used in close-html.php and AJAX handling below
        //Flush the output buffer - send all the output generated by the server to the client now
        ob_end_flush();
    }

    public static function login($username, $password):bool {
        //Assume failure
        $successfulLogin = false;
        //Validate the function's arguments
        if (is_string($username) && is_string($password)) {
            //Get an instance of the database and session handlers
            $dbHandler = self::fetchDatabaseHandler();
            $sessionHandler = self::fetchSessionHandler();
            //Fetch the relevant user's data
            $dbHandler->runCommand("SELECT `Password`,`UserID`,`Username`,`TypeOfUser`,`Confirmation` FROM REGISTERED_USER WHERE `Username` = ?", $username);
            $result = $dbHandler->getResults();
            //If a single result was returned and the password matches the hashed password stored in the database
            if (count($result) == 1 && password_verify($password, $result[0]['Password'])) {
                //Mark success
                $successfulLogin = true;
                //Set any variables you want access to in the session
                $sessionHandler->setSessionVariable("UserID",$result[0]['UserID']);
                $sessionHandler->setSessionVariable("Username", $result[0]['Username']);
                $sessionHandler->setSessionVariable("UserType", $result[0]['TypeOfUser']);
                $sessionHandler->setSessionVariable("UserConfirmation", $result[0]['Confirmation']);
            }
        }
        return $successfulLogin;
    }

    //Due to this function relying on redirect, it must happen in the beginning of the open-html.php file too.
    public static function logout() {
        //Clear and end the current session
        self::fetchSessionHandler()->endSession();
    }

    //This must be called before any output is sent to the client, so in the beginning of the open-html.php file.
    public static function redirect($url) {
        if (is_string($url)) {
            //Redirect the server
            header("Location: " . $url);
            //End script execution of current page
            exit(0);
        }
    }
    //TODO:The following method should be run to ensure that a session is in session before any other method is run, just for added security, there may be more security checks one can do - research
    public static function serverSecurityCheck(): bool {
        $sessionHandler = self::fetchSessionHandler();
        $result = $sessionHandler->getSessionVariable("UserID");

        if($result != null)
            return true;
        else
            return false;
    }

    public static function fetchDatabaseHandler():DatabaseHandler {
        $session = self::fetchSessionHandler();
        if ($session->exists("dbHandler")) {
            $dbHandler = $session->getSessionVariable("dbHandler");
        } else {
            $dbHandler = new DatabaseHandler("localhost","root","Sebenza","SebenzaSA_Database");
            $session->setSessionVariable("dbHandler", $dbHandler);
        }
        return $dbHandler;
    }

    public static function createAndResetDatabase():bool {
        $dbHandler = new DatabaseHandler("localhost","root","Sebenza","");
        $success = $dbHandler->executeSQLScriptFile("database/SebenzaSA_Database.sql");
        self::fetchSessionHandler()->setSessionVariable("dbHandler", $dbHandler);
        return $success;
    }

    public static function fetchSessionHandler():Session {
        $session = new Session();
        if ($session->exists('sessionHandler')) {
            $session = $session->getSessionVariable('sessionHandler');
        } else {
            $session->setSessionVariable('sessionHandler', $session);
        }
        return $session;
    }

    public static function hashPassword($password):string {
        return password_hash($password,PASSWORD_DEFAULT);
    }
    
    public static function addNotification($userID, $message):bool {
        $returnValue = false;
        if (is_int($userID) && is_string($message)) {
            $dbHandler = self::fetchDatabaseHandler();
            $command = "INSERT INTO `NOTIFICATION` (`UserID`,`Message`) VALUES (?, ?)";
            $returnValue = $dbHandler->runCommand($command, $userID, $message);
        }
        return $returnValue;
    }

    public static function pullNotifications():array {
        $returnValue = array();
        if (self::fetchSessionHandler()->exists('UserID')) {
            $uid = self::fetchSessionHandler()->getSessionVariable('UserID');
            $command = "SELECT `NotificationID`,`Message` FROM `NOTIFICATION` WHERE `UserID` = ? AND `Pulled` = false AND `Pushed` = false AND `Expired` = false";
            $dbHandler = self::fetchDatabaseHandler();
            if ($dbHandler->runCommand($command, $uid)) {
                $results = $dbHandler->getResults();
                if (count($results) > 0) {
                    foreach ($results as $result) {
                        $returnValue[] = $result['Message'];
                        $dbHandler->runCommand("UPDATE `NOTIFICATION` SET `Pulled` = true WHERE `NotificationID` = ?", $result['NotificationID']);
                    }
                }
            }
        }
        return $returnValue;
    }
    /*The following function will register the user according to his type, confirmation of email will be required from all
    users, to ensure that the email account exists.*/
    public static function register(array $input, $type){
        $locationsToRemove = 0;
        $locationsPerUserToRemove = 0;
        $skillsPerUserToRemove = 0;
        //should be an integer that will never exist within the database
        $id = -5;
        $email = $input[1];
        $username = $input[0];
        $keyToSend = self::hashPassword($email + $username + time());
        $numLocations = $input[6];
        $numSkills = $input[9];
        $busDescription = $input[10];
        $busTimeFrom = $input[11];
        $busTimeTo = $input[12];
        $contractorAvailability = $input[13];
        if($contractorAvailability == "on"){
            $contractorAvailability = 1;
        }
        else if($contractorAvailability == "off"){
            $contractorAvailability = 0;
        }
        $locationID = array($numLocations);
        $locationsToRemove = array($numLocations);
        $locationsToRemoveAmount = 0;
        $condition = self::mailClient($email,$keyToSend,$input);
//        $condition = true;
        //$test = "";
        $returnValue = true;
       if($condition)
            switch ($type){
                case 'contractor':
                    //$test .= "Working with contractor";
                    $command = "SELECT `locationID`,`locationName` FROM `LOCATIONS` WHERE `locationName` = ?";
                    $command1 = "INSERT INTO `LOCATIONS` (`locationName`, `Coordinates`, `Region`, `Province`, `City`) VALUES (?,?,?,?,?)";
                    $dbHandler = self::fetchDatabaseHandler();
                    //The following will run through all the areas added by the contractor and areas which don't exist will be added to the database, consider having an admin accept and reject areas according to a standard
                    $condition = true;
                    $region = "A";
                    $coordinates = "0:0";

                    for($k = 0; (($k < $numLocations) && $condition);$k++){
                        //$test .= $k." ";
                        if($dbHandler->runCommand($command,$_POST["areaname-contractor-".$k])) {
                            //$test .= " Running through areas: ";
//                            //Should always return true, even if a matching area is not found, then that area will be added.
                            $result = $dbHandler->getResults();

                            if (count($result) == 0) {
//                                //If the area does not exist in the database add it and gain a handle on the id
                                $area = $_POST["areaname-contractor-".$k];
                                $province = $_POST["provincename-contractor-".$k];
                                $city = $_POST["cityname-contractor-".$k];
                                //TODO: coordinates can be requested through google maps api - extra - may make marking a google map for information a lot easier later
                                if($dbHandler->runCommand($command1, $area, $coordinates, $region, $province, $city)){
                                    //$test .= "Area added: ".$area." ".$province." ".$city."\n";
                                    $locationID[$k] = $dbHandler->getInsertID();
//                                    $locationsToRemove = $k + 1;
                                    $locationsToRemove[++$locationsToRemoveAmount] = $dbHandler->getInsertID();
                                }
                                else{
                                    //$test .= "no locations added from k =".$k;
                                    //$k = $numLocations + 5;
                                    $condition = false;
                                    $returnValue = false;
                                    //dbhandler has failed to run for some reason remove all locations added to LOCATIONS
                                }
                            } else {
                                //$test .= " Areas to run through: ".count($result)."The values contained withing the result: id - ".$result[0]['locationID']." Name - ".$result[0]['locationName'];
//                                //If the area exists in the database gain a handle on the areaID - there should only be one returned result as the area names should be unique
                                $locationID[$k] = $result[0]['locationID'];
                            }
                        }
                        else{
                            //dbhandler has failed to run for some reason remove all locations added to LOCATIONS if any
                            //$test .= "Couldnt run dbhandler to locate areas";
//                            $locationsToRemove = $k - 1;
                            //$k = $numLocations + 5;
                            $condition = false;
                            $returnValue = false;
                        }
                    }
                    //Due to LOCATIONS having multiple inserts which run in a for loop $condition exists, can be done when the for loop reaches the last position.
                    if($condition){
                        $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name`) VALUES (?,?,?,?,?,?,?)";
                        $contactNumber = $input[2];
                        $password = self::hashPassword($input[3]);
                        $name = $input[5];
                        $surname = $input[4];
                        if ($dbHandler->runCommand($command, $username, $email, $contactNumber, 1, $password, $surname, $name)) {
                            //$test .= "\nSuccessfully added the following user to REGISTERED_USER: ".$username." ".$email." ".$contactNumber." "."1"." ".$password." ".$surname." ".$name;
                            //once users are inserted into the REGISTERED_USER table appropriate data will be inserted into the CONFIRMATIONS table
                            $id = $dbHandler->getInsertID();
                            $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                            if( $dbHandler->runCommand($command, $id, $keyToSend)){
                                //once users are inserted into the CONFIRMATIONS table appropriate data will be inserted into the CONTRACTOR table
                                $busName = $input[7];
                                $busAddress = $input[8];
                                //The following is to check whether the contractor is VAT registered or not
                                if($_POST['ignore-exampleSwitch'] == "on") {
                                    //This will insert into the database taking into account the business is - VAT registered
                                    //$test .= "\nInserting details for VAT registered entity";
                                    $command = "INSERT INTO `CONTRACTOR` (`UserID`, `BusinessRegistrationNum`, `BusinessVatNum`, `BusinessAddress`, `BusinessName`, `VatRegistered`, `BusinessDescription`,`BusinessHoursFrom`,`BusinessHoursTo`,`Availability`) VALUES (?,?,?,?,?,?,?,?,?,?)";
                                    if($dbHandler->runCommand($command,$id,$_POST['reg-contractor'],$_POST['vat-contractor'],$busAddress,$busName,1,$busDescription,$busTimeFrom,$busTimeTo,$contractorAvailability)){
                                        //$test .= "\nThe following entries have been inserted into CONTRACTOR: ".$id." ".$_POST['reg-contractor']." ".$_POST['vat-contractor']." ".$busAddress." ".$busName;
//                                        $condition2 = true;
                                        $command = "INSERT INTO `SPECIALIZATIONS_PER_USER` (`UserID`, `workTypeID`) VALUES (?,?)";
                                        for($j = 0; (($j < $numSkills) && $condition);$j++){
                                            if($dbHandler->runCommand($command,$id,$_POST['contractor-work-type-'.$j])){

                                            }
                                            else{
                                                $condition = false;
                                            }
                                        }
                                        if($condition){
                                            $command = "INSERT INTO `LOCATIONS_PER_USER` (`UserID`, `locationID`) VALUES (?,?)";
                                            for($k = 0;$k<$numLocations && $condition;$k++){
                                                $returnValue = $dbHandler->runCommand($command,$id,$locationID[$k]);
                                                if($returnValue){

                                                }
                                                else{
                                                    $condition = false;

                                                }
                                            }
                                            if(!$condition){
                                                $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                                for($k=0;$k<$locationsToRemoveAmount;$k++){
                                                    //Technically one should test if this fails too
                                                    $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                                }
                                                $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $returnValue = false;
                                            }
                                        }
                                        else{
                                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                            for($k=0;$k<$locationsToRemoveAmount;$k++){
                                                //Technically one should test if this fails too
                                                $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                            }
                                            $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $returnValue = false;
                                        }

                                        }
                                    else{
                                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                        for($k=0;$k<$locationsToRemoveAmount;$k++){
                                            //Technically one should test if this fails too
                                            $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                        }

                                        $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command,$id);
                                        $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command,$id);
                                        $returnValue = false;
                                    }
                                }
                                else{
                                    //This will insert into the database taking into account the business is not - VAT registered
                                    //$test .= "\nInserting details for a non VAT registered entity";
                                    $command = "INSERT INTO `CONTRACTOR` (`UserID`, `BusinessAddress`, `BusinessName`,`VatRegistered`, `BusinessDescription`,`BusinessHoursFrom`,`BusinessHoursTo`,`Availability`) VALUES (?,?,?,?,?,?,?,?)";
                                    if($dbHandler->runCommand($command,$id,$busAddress,$busName,0,$busDescription,$busTimeFrom,$busTimeTo,$contractorAvailability)){
                                        //$test .= "\nThe following entries have been inserted into CONTRACTOR: ".$id." ".$busAddress." ".$busName;
                                        $command = "INSERT INTO `SPECIALIZATIONS_PER_USER` (`UserID`, `workTypeID`) VALUES (?,?)";
                                        for($j = 0; ($j < $numSkills) && $condition;$j++){
                                            if($dbHandler->runCommand($command,$id,$_POST['contractor-work-type-'.$j])){
                                                //$test .= "\nThe following entries have been inserted into SPECIALIZATIONS_PER_USER: ".$id." ".$_POST['contractor-work-type-'.$j];
                                            }
                                            else{
                                                //$test .= "\nFailed to insert specialization";
                                                $condition = false;
                                            }
                                        }
                                        if($condition){
                                            //$test .= "All specializations per user have been added successfully";
                                            $command = "INSERT INTO `LOCATIONS_PER_USER` (`UserID`, `locationID`) VALUES (?,?)";
                                            for($k = 0;$k<$numLocations && $condition;$k++){
                                                //$test .= "\nInserting in locations:";
                                                $returnValue = $dbHandler->runCommand($command,$id,$locationID[$k]);
                                                if($returnValue){
                                                    //$test .= "The following locations have been added to the user: ".;
                                                }
                                                else{
                                                    $condition = false;
                                                }
                                            }
                                            if(!$condition){
                                                $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                                for($k=0;$k<$locationsToRemoveAmount;$k++){
                                                    //Technically one should test if this fails too
                                                    $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                                }
                                                $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command,$id);
                                                $returnValue = false;
                                            }
                                        }
                                        else{
                                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                            for($k=0;$k<$locationsToRemoveAmount;$k++){
                                                //Technically one should test if this fails too
                                                $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                            }
                                            $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command,$id);
                                            $returnValue = false;
                                        }

                                    }
                                    else{
                                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                        for($k=0;$k<$locationsToRemoveAmount;$k++){
                                            //Technically one should test if this fails too
                                            $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                        }
                                        $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command,$id);
                                        $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command,$id);
                                        $returnValue = false;
                                    }
                                }
                            }
                            else{
                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                for($k=0;$k<$locationsToRemoveAmount;$k++){
                                    //Technically one should test if this fails too
                                    $dbHandler->runCommand($command,$locationsToRemove[$k]);
                                }
                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command,$id);
                                $returnValue = false;
                            }
                            //TODO: A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries
                        }
                        else{
                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                            for($k=0;$k<$locationsToRemoveAmount;$k++){
                                //Technically one should test if this fails too
                                $dbHandler->runCommand($command,$locationsToRemove[$k]);
                            }
                            $returnValue = false;
                        }
                    }
                    else{
                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                        for($k=0;$k<$locationsToRemoveAmount;$k++){
                        //Technically one should test if this fails too
                            $dbHandler->runCommand($command,$locationsToRemove[$k]);
                        }
                        $returnValue = false;
                    }
                    return $returnValue;
                    break;
                case 'homeuser':
                    $condition = true;
                    $region = "A";
                    $coordinates = "0:0";
                    $command = "SELECT `LocationID`, `LocationName` FROM `LOCATIONS` WHERE `locationName` = ? " ;
                    $command1 = "INSERT INTO `LOCATIONS` (`locationName`, `Coordinates`, `Region`, `Province`, `City`) VALUES (?,?,?,?,?)";
                    $dbHandler = self::fetchDatabaseHandler();

                    // The following code will add a users location to the database, home users only have a single location therefore there is no necessity for a loop
                    // if the location does not exist in our databsae it will then be added
                     if($condition) {
                         if ($dbHandler->runCommand($command, $_POST["areaname-homeuser-"])) {
                             //$test .= " Running through areas: ";
                             //Should always return true, even if a matching area is not found, then that area will be added.
                             $result = $dbHandler->getResults();

                             if (count($result) == 0) {
                                 //If the area does not exist in the database it will add it and gain a handle on the id
                                 $area = $_POST["areaname-homeuser-"];
                                 $province = $_POST["provincename-homeuser-"];
                                 $city = $_POST["cityname-homeuser-"];

                                 if ($dbHandler->runCommand($command1, $area, $coordinates, $region, $province, $city)) {
                                     //$test .= "Area added: ".$area." ".$province." ".$city."\n";
                                     $locationID[0] = $dbHandler->getInsertID();
                                     //$locationsToRemove = $k + 1;
                                     $locationsToRemove[++$locationsToRemoveAmount] = $dbHandler->getInsertID();
                                 } else {
                                     //$test .= "no locations added from k =".$k;
                                     //$k = $numLocations + 5;
                                     $condition = false;
                                     $returnValue = false;
                                     //dbhandler has failed to run for some reason remove all locations added to LOCATIONS
                                 }
                             } else {
                                 //$test .= " Areas to run through: ".count($result)."The values contained withing the result: id - ".$result[0]['locationID']." Name - ".$result[0]['locationName'];
                                 //If the area exists in the database gain a handle on the areaID - there should only be one returned result as the area names should be unique
                                 $locationID[0] = $result[0]['locationID'];
                             }
                         } else {
                             //dbhandler has failed to run for some reason remove all locations added to LOCATIONS if any
                             //$test .= "Couldnt run dbhandler to locate areas";
                             ////$locationsToRemove = $k - 1;
                             //$k = $numLocations + 5;
                             $condition = false;
                             $returnValue = false;
                         }

                         if ($condition) {
                             $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name`) VALUES (?,?,?,?,?,?,?)";
                             $contactNumber = $input[2];
                             $password = self::hashPassword($input[3]);
                             $name = $input[5];
                             $surname = $input[4];

                             if ($dbHandler->runCommand($command, $username, $email, $contactNumber, 2, $password, $surname, $name)) {
                                 $id = $dbHandler->getInsertID();
                                 $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                                 if ($dbHandler->runCommand($command, $id, $keyToSend)) {
                                     $command = "INSERT INTO `HOMEUSER`(`UserID`, `Subscribed`) VALUES (`UserID`, `false`)";
                                     $dbHandler->runCommand($command);
                                     if ($condition) {
                                         $command = "INSERT INTO `LOCATIONS_PER_USER`(`UserID`, `locationID`) VALUES (?,?)";
                                         //$test .= "\nInserting in locations:";
                                         $returnValue = $dbHandler->runCommand($command, $id, $locationID[0]);
                                         if ($returnValue) {
                                             //$test .= "The following locations have been added to the user: ".;
                                         } else {
                                             $condition = false;
                                         }

                                         // The code below will remove from all inserted elements of the users details from the database
                                         if (!$condition) {
                                             $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                                             //$test .= "\n Removing from locations:";
                                             $returnValue = $dbHandler->runCommand($command, $id, $locationID[0]);
                                             $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                             //Technically one should test if this fails too
                                             $dbHandler->runCommand($command, $locationsToRemove[0]);

                                             $command = "DELETE FROM `HOMEUSER` WHERE `UserID` = ?";
                                             $dbHandler->runCommand($command, $id);
                                             $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                             $dbHandler->runCommand($command, $id);
                                             $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                             $dbHandler->runCommand($command, $id);
                                             $returnValue = false;
                                         }
                                     } else {
                                         $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                         //Technically one should test if this fails too
                                         $dbHandler->runCommand($command, $locationsToRemove[0]);
                                         $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                         $dbHandler->runCommand($command, $id);
                                         $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                         $dbHandler->runCommand($command, $id);
                                         $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                         $dbHandler->runCommand($command, $id);
                                         $returnValue = false;

                                     }
                                 } else {
                                     $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                     //Technically one should test if this fails too
                                     $dbHandler->runCommand($command, $locationsToRemove[0]);
                                     $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                     $dbHandler->runCommand($command, $id);
                                     $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                     $dbHandler->runCommand($command, $id);
                                     $returnValue = false;
                                 }
                             } else {
                                 $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                 //Technically one should test if this fails too
                                 $dbHandler->runCommand($command, $locationsToRemove[0]);
                                 $returnValue = false;
                             }
                         } else {
                             $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                             //Technically one should test if this fails too
                             $dbHandler->runCommand($command, $locationsToRemove[0]);
                             $returnValue = false;
                         }
                     } else{
                         $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                         //Technically one should test if this fails too
                         $dbHandler->runCommand($command,$locationsToRemove[0]);
                         $returnValue = false;
                     }

                        //A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries

                    return $returnValue;
                    break;
                case 'tradeworker':
                    $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name`) VALUES (?,?,?,?,?,?,?)";
                    $contactNumber = $input[2];
                    $password = self::hashPassword($input[3]);
                    $name = $input[5];
                    $surname = $input[4];
                    $dbHandler = self::fetchDatabaseHandler();
                    if($dbHandler->runCommand($command,$username,$email,$contactNumber,0,$password,$surname,$name)){
                        $id = $dbHandler->getInsertID();
                        $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                        $returnValue = $dbHandler->runCommand($command,$id,$keyToSend);
                        //A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries
                    }
                    return $returnValue;
                    break;
                default:
                    return $returnValue;
                    break;
            }
        return $returnValue;
    }

    public static function mailClient($to,$key):bool{
        require $_SERVER['DOCUMENT_ROOT'] ."/php/externalClasses/PHPMailer-master/PHPMailer-master/PHPMailerAutoload.php";
        $mail = new PHPMailer;

        //$mail->SMTPDebug = 3;                               // Enable verbose debug output
        $link = "http://localhost:31335/index.php?email=".$to."&key=".$key;
        $title = "Sebenza South Africa";
        $mail->isSMTP();                                      // Set mailer to use SMTP
        $mail->Host = 'smtp.gmail.com';  // Specify main and backup SMTP servers
        $mail->SMTPAuth = true;                               // Enable SMTP authentication
        $mail->Username = '215040496@student.uj.ac.za';                 // SMTP username
        $mail->Password = '';                           // SMTP password
        $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
        $mail->Port = 587;                                    // TCP port to connect to
        $mail->IsHTML(true);
        $mail->setFrom('215040496@student.uj.ac.za', 'Mailer');
        $mail->addAddress($to, 'Joe User');       // Name is optional
        $mail->addReplyTo('215040496@student.uj.ac.za', 'Information');

        $mail->Subject = 'SebenzaSA Confirmation';
        $mail->Body    = 'This is the HTML message body <b>in bold!</b><br/><a href="'.$link.'">'.$title.'</a>';
        return $mail->send();
    }
    //The following function is used to confirm a user who has clicked on the link within an email he received
    public static function userConfirm($email,$key):bool{
        $returnValue = false;
        $command = "SELECT `UserID`,`Confirmation` FROM `REGISTERED_USER` WHERE `Email` = ?";
        $dbhandler = self::fetchDatabaseHandler();
        //Check whether the email exists within the database
        if($dbhandler->runCommand($command,$email)){
            $results = $dbhandler->getResults();

            //Check whether the user has been confirmed or not
            if(count($results)> 0)
                if(!$results[0]['Confirmation']){
                    $command = "SELECT `Key` FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                    //Retrieve the key associated with the user upon the account registration
                    if($dbhandler->runCommand($command,$results[0]['UserID'])) {
                        $storedKey = $dbhandler->getResults();
                        //Test whether the keys from database and from email are the same value
                        if ($storedKey[0]["Key"] === $key) {
                            $command = "UPDATE `REGISTERED_USER` SET `Confirmation` = TRUE WHERE `UserID`=?";
                            //Set the confirmation to true
                            if ($dbhandler->runCommand($command, $results[0]['UserID'])) {
                                //Delete the entry required to test confirmation
                                if($dbhandler->runCommand("DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?", $results[0]['UserID'])){
                                    $returnValue = true;
                                }
                            }
                        }
                    }
                }
        }
        return $returnValue;
    }

    public static function returnWorkTypes(){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "Select `WorkType`,`workTypeID` FROM SPECIALIZATIONS";
        $dbhandler->runCommand($command);
        $results = $dbhandler->getResults();
        return $results;
    }

    //The following function is the initial implementation of fetching the next available user, this doesn't take experience into account
    //currently just checks if TW available in $area for a given $workType will check when was the last time they worked if there is more than one and send the one
    //with the date that is the lowest.
    public static function fetchAvailableTradeworker($workTypeID,$areaID,$numRequests,$requestID){
        $returnValue = 1;
        //Fetch userID's from LOCATIONS_PER_USER,SPECIALIZATIONS_PER_USER where locations equal areaID and work types equal workTypeID
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `UserID` FROM `LOCATIONS_PER_USER` WHERE `locationID` = ?";
        $dbhandler->runCommand($command,$areaID);
        $locationsResults = $dbhandler->getResults();
        $command = "SELECT `UserID` FROM `SPECIALIZATIONS_PER_USER` WHERE `workTypeID` = ?";
        $dbhandler->runCommand($command,$workTypeID);
        $userResults = $dbhandler->getResults();
        $applicants = [];
        //If there are userIDs returned check which ones match and store them in an array
        if(count($locationsResults)>0 && count($userResults)>0){
            for($j = 0;$j<count($locationsResults);$j++){
                for($k = 0;$k<count($userResults);$k++){
                    if($locationsResults[$j]['UserID'] == $userResults[$k]['UserID']){
                        array_push($applicants,$userResults[$k]['UserID']);
                    }
                }
            }
        }
        else{
            if(count($locationsResults) == 0)
                $returnValue *= -5;
            if(count($userResults) == 0)
                $returnValue *= -7;
        }
        //At this point if the applicants array has any elements in it, it means that there exists a user who has the skill type required and has listed the area as an area he is under
        $applicantsToSend = [];
        if(count($applicants) > 0){
            $counter = 0;
            $condition = true;
            for($l = 0; $l <count($applicants); $l++){
                $command = "SELECT `UserID`,`DateWorked` FROM `TRADE_WORKER` WHERE `UserID` = ? AND `Availability`=TRUE";
                $dbhandler->runCommand($command,intval($applicants[$l]));
                $result = $dbhandler->getResults();
                //This will take only the tradeworkers who are available out and put them in an array
                if(count($result) > 0){
//                    $returnValue .= "\n The following is the available user for that area: ".$result[0]['UserID']." : ".$result[0]['DateWorked'];
                    array_push($applicantsToSend,$result[0]);
                }
            }
        }
        else{
            $returnValue *= -13;
            //this should return that no tradeworkers exist in that location with that specific skill required
        }

        //Remove all tradeworkers already related to the the request
        $command = "SELECT * FROM `QUOTE` WHERE `RequestID` = ? AND `RequestedUser` = ?";
        $continue = true;
        if(count($applicantsToSend) > 0)
        while($continue){
            $toRemove = true;
            for($e = 0; $e < count($applicantsToSend) && $toRemove;$e++){
                $dbhandler->runCommand($command,$requestID,$applicantsToSend[$e]['UserID']);
                $result = $dbhandler->getResults();
                if(count($result) > 0){
                    array_slice($applicantsToSend,$e, 1);
                    $toRemove = false;
                }
            }
            if($e == count($applicantsToSend)){
                $continue = false;
            }
        }

        //This will fail if no users are available of users in given area and work type
        //The process of comparing which tradeworker to take currently involves only comparing the last time worked(date) and will return the tradeworker with the lowest date worked

        if(count($applicantsToSend) > 0){
            $returnValue =[];
            if(count($applicantsToSend) == 1){
                 array_push($returnValue,$applicantsToSend[0]['UserID']);
            }
            else if(count($applicantsToSend) < $numRequests ){
                for($e = 0; $e < count($applicantsToSend);$e++){
                    array_push($returnValue,$applicantsToSend[$e]['UserID']);
                }
            }
            else{
                //TODO: Check that the tradeworker requested doesn't already have a notification else till he accepts the job his date will remain the lowest perhaps allow for 5 notifications per tradeworker before removing the id from the valid list
                //TODO: check amount of notifications
                $counter = 0;
                while($counter < $numRequests){
                    $leastIndex = 0;
                    $minDate = DateTime::createFromFormat("Y-m-d",$applicantsToSend[0]['DateWorked']);
                    $activeWorkRequests = $dbhandler->runCommand("SELECT `ActiveWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$applicantsToSend[0]['UserID']);
//                $returnValue = $applicantsToSend[0]['UserID'];
                    for($m = 1;$m < count($applicantsToSend);$m++){
//                    $returnValue .= " \n Should be compared with".$applicantsToSend[$m]['DateWorked'];
                        $date2 = DateTime::createFromFormat("Y-m-d",$applicantsToSend[$m]['DateWorked']);
                        $activeWorkRequests2 = $dbhandler->runCommand("SELECT `ActiveWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$applicantsToSend[$m]['UserID']);
                        if($date2 < $minDate && $activeWorkRequests2 < $activeWorkRequests){
                            $minDate = $date2;
                            $activeWorkRequests = $activeWorkRequests2;
                            $leastIndex = $m;
                        }
                    }

                    array_push($returnValue,$applicantsToSend[$leastIndex]['UserID']);
                    array_slice($applicantsToSend,$leastIndex,1);
                    $counter++;
                }
            }
        }
        else{
            //Currently no available tradeworkers in the area
            $returnValue *= -11;
        }

        return $returnValue;
    }

    public static function homeuserRequestTradeworker($input){

//        $_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'])
        $dbhandler = self::fetchDatabaseHandler();
        $route = $input[2];
        $workType = 6;
        $area = $input[4];
        $subArea = $input[3];
        $streetNumber = $input[1];
        $province = $input[5];
        $date = $input[0];
        $numRequest = $input[8];
//        $date = DateTime::createFromFormat("Y-m-d",$input[0]);
        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `locationName` = ?";
        $dbhandler->runCommand($command,$area);
        $result = $dbhandler->getResults();
        $locationID = -1;

        if(count($result) > 0){
            $locationID = $result[0]['locationID'];
        }
        else{
            //TODO:The user needs to be informed that no tradeworker/contractor exists with that skill in the area currently
            //I think to make that if an area has no tradeworkers that the area cannot be added by the homeuser to be the best approach
            $result = 1;
            $result *= 2;
        }
        $addressID = -1;
        if($locationID > 0) {
            $command = "SELECT `AreaID` FROM `AREA_PER_LOCATION` WHERE `AreaName` = ? AND `StreetNumber` = ?";
            $dbhandler->runCommand($command, $subArea, $streetNumber);
            $result = $dbhandler->getResults();

            if (count($result) > 0) {
                $addressID = $result[0]['AreaID'];
            }
            else {
                //This one can occur it just means the street address and area need to be added to the database
                $command = "INSERT INTO `AREA_PER_LOCATION` (`StreetNumber`,`AreaName`,`locationID`,`Road`) VALUES (?,?,?,?)";
                if($dbhandler->runCommand($command, $streetNumber, $subArea, $locationID,$route)){
                    $addressID = $dbhandler->getInsertID();
                }
                else{
                    //area failed to insert for some reason check for errors
                    $result = 1;
                    $result *= 3;
                }

            }
        }

        $session = self::fetchSessionHandler();
        $id = $session->getSessionVariable('UserID');

        //$result = $addressID." ".$locationID;
        //TODO: run for loop for all the different skill types requested as well as set up a quote per number requested per skill
        if($addressID > 0 && $locationID > 0 && $id){
            //The following will check if a tradeworker exists with the skills required so that a notification can be sent out immediately
            // outer for loop runs on ignore-actual-nTradeworkers-homeuser-rTradeworker while inner for loop will run on nTradeworkers-homeuser-rTradeworker-0
            $command = "INSERT INTO `QUOTE_REQUEST` (`UserID`,`NumberOfWorkersRequested`,`workTypeID`,`JobDescription`,`Address`,`JobCommencementDate`) VALUES (?,?,?,?,?,?)";

            for($z = 0; $z < $numRequest; $z++){
                $numRequestPerType = $_POST['nTradeworkers-homeuser-rTradeworker-'.$z];
                $workType = $_POST['homeuser-rTradeworker-work-type-'.$z];
                $jobDescription = $_POST['job-description-homeuser-rTradeworker-'.$z];
                if ($dbhandler->runCommand($command, $id, $numRequestPerType, $workType, $jobDescription, $addressID, $date)) {

                    $requestID = $dbhandler->getInsertID();
                    $tradeworkerID = self::fetchAvailableTradeworker($workType,$locationID,$numRequestPerType,$requestID);

                    if(gettype($tradeworkerID) == "boolean"){
                        //TODO:Tell the difference between unavailable users in an area and no users in the area with selected work type so that user can leave the request active for when a tradeworker becomes available the returned values will then be negative integer for errors and if it passes it will be a positive integer
                        //Technically this should not occur anymore on failure negative integer value is sent
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "integer") {
//                    Tradeworker could not be requested an error occured in the method fetchAvailableTradeworker
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "array"){
                        if(count($tradeworkerID) > 0){
                            for($r = 0;$r < count($tradeworkerID);$r++){
                                $command = "INSERT INTO `QUOTE` (`RequestID`,`RequestedUser`) VALUES (?,?)";
                                if ($dbhandler->runCommand($command, $requestID, $tradeworkerID[$r])) {
                                    //The insert was successful send notification to tradeworker
                                    if (self::addNotification($tradeworkerID[$r], "Added job request: check under manage jobs - job requests tab")) {
                                        //TODO:Add one to the activeRequests as well as one to the overall requests to the TRADEWORKER table for the given tradeworker id,
                                        $dbhandler->runCommand("SELECT `ActiveWorkRequests`,`OverallWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$tradeworkerID[$r]);
                                        $amount = $dbhandler->getResults();
                                        $command = "UPDATE `TRADE_WORKER` SET `ActiveWorkRequests` = ? , `OverallWorkRequests` = ? WHERE `UserID` = ?";
                                        if ($dbhandler->runCommand($command,intval($amount[0]['ActiveWorkRequests'] + 1),intval($amount[0]['OverallWorkRequests'] + 1),$tradeworkerID[$r])) {
                                            $result = $amount;
                                            //This should be counting array of the result of the dbHandler
                                        } else {
                                            $result = "Failed to increment tradeworker notifications";
                                        }
                                    } else {
                                        $result = "Could not add notification";
                                    }
                                } else {
                                    //The quote request could not be inserted for some reason error check
                                    $result = "Could not add quote" . $date;
                                }
                            }
                        }

                    }
                    else{
                        //The following should never occur the return type should be of Integer or boolean or array only

                        $result = false;
                    }
                }
                else{
                    //Failed to add request to database
                }
            }



        }

        return $result;
    }

    public static function fetchAreasPerLocationDetails($addressID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `StreetNumber`,`AreaName`,`locationID`,`Road` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
        $dbhandler->runCommand($command,$addressID);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return false;
        }
    }

    public static function fetchLocationDetails($locationID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `locationName`,`Province` FROM `LOCATIONS` WHERE `locationID` = ?";
        $dbhandler->runCommand($command,$locationID);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return false;
        }
    }

    public static function fetchHomeuserJobRequests($userID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `RequestID`,`workTypeID`,`JobDescription`,`Address`,`DateInitialised`,`JobCommencementDate` FROM `QUOTE_REQUEST` WHERE `UserID` = ?";
        $dbhandler->runCommand($command,$userID);
        $result = $dbhandler->getResults();
        $worktypes = self::returnWorkTypes();
        //TODO: refactor with Quote table NB!!!! - just return a count of the number of request in quote sent out per quote_request
        //TODO:Retrieve according to address get the
        //If results contains information then the fetching of areas and locations should be able to occur, because the address column is directly related to AREAS_PER_LOCATION which is also related to LOCATIONS
        if(count($result) > 0 && count($worktypes) > 0) {

            for ($i = 0; $i < count($result); $i++) {
                $found = false;
                $areas = self::fetchAreasPerLocationDetails($result[$i]['Address']);
                $locations = self::fetchLocationDetails($areas[0]['locationID']);
                for($j = 0; $j < count($worktypes) && !$found;$j++){
                    if($result[$i]['workTypeID'] == $worktypes[$j]['workTypeID']){
                        $found = true;
                        array_push($result[$i],$worktypes[$j]['WorkType'],$areas[0]['StreetNumber'],$areas[0]['Road'],$areas[0]['AreaName'],$locations[0]['locationName'],$locations[0]['Province']);
                    }
                }


            }
            return $result;
        }
        else
            return "It failed";
    }

    public static function fetchUserType(){
        $sessionHandler = self::fetchSessionHandler();
        $result = $sessionHandler->getSessionVariable("UserType");
        if($result != null)
            return $result;
        else
            return -1;

    }

    public static function isUnique($value,$condition,$type){
        switch($type){
            case "registered_users":
                $dbhandler = self::fetchDatabaseHandler();
                $command = "SELECT * FROM `REGISTERED_USER` WHERE `".$condition."` = ?";
                $dbhandler->runCommand($command,$value);
                $results = $dbhandler->getResults();

                if(count($results) > 0){
                    return false;
                }
                else{
                    return true;
                }
                break;
            case "contractor":
                $dbhandler = self::fetchDatabaseHandler();
                $command = "SELECT * FROM `CONTRACTOR` WHERE `".$condition."` = ?";
                $dbhandler->runCommand($command,$value);
                $results = $dbhandler->getResults();

                if(count($results) > 0){
                    return false;
                }
                else{
                    return true;
                }
                break;
            default:
                return false;
                break;
        }

    }
}
//The following is currently used to receive the confirmation requests from the user
if (!empty($_GET)){
    if(isset($_GET['email']) && isset($_GET['key'])){
        //If this returns false one could log the false returns to see if unwanted entry into the server occurred
            $result = SebenzaServer::userConfirm($_GET['email'],$_GET['key']);

        if($result){
            SebenzaServer::logout();
        }
        //Email link e.g. localhost:31335/index.php?email="teat@test.com"&key="test"
    }
}

//TODO:I think second-level validation should occur here for in case the sebenza.js file is overwritten with a malicious version
//The following code handles ajax requests sent to SessionModule.php as in sebenza.js for the login functionality
if (!empty($_POST)) {
    //Synchronise the time and start output buffering (an AJAX request can happen separate from an official page load)
    SebenzaServer::start();
    //AJAX requests are served some sort of textual response (usually JSON for easier handling by JavaScript)
    $response = "";
    if (isset($_POST['action'])) {
        $action = $_POST['action'];
        switch ($action) {
            case 'fetch_notifications':
                $response = json_encode(SebenzaServer::pullNotifications());
                break;
            case 'login':
                if (isset($_POST['username']) && isset($_POST['password'])) {
                    $response = json_encode(SebenzaServer::login($_POST['username'], $_POST['password']));
                } else {
                    $response = json_encode(false);
                }
                break;
            case 'logout':
                $response = json_encode(true);
                SebenzaServer::logout();
                break;
            case 'register-contractor':
                //Ensure all skill are set
                $condition = true;
                $test = 1;
                if(isset($_POST['ignore-sillsAdded-contractor'])){
                    for($k = 0; $k < $_POST['ignore-sillsAdded-contractor'];$k++){
                        if(!isset($_POST['contractor-work-type-'.$k])){
                            $condition = false;
                        }
                    }
                }
                else {
                    $condition = false;
                }
                if(!isset($_POST['ignore-availability-contractor'])) {
                    $condition = false;
                }

                //Ensure all locations are set
                if(isset($_POST['ignore-locationsAdded-contractor'])){
                    for($k = 0; $k < $_POST['ignore-locationsAdded-contractor'];$k++){
                        if(!isset($_POST['areaname-contractor-'.$k])){
                            $condition = false;
                        }
                        if(!isset($_POST['cityname-contractor-'.$k])){
                            $condition = false;
                        }
                        if(!isset($_POST['provincename-contractor-'.$k])){
                            $condition = false;
                        }
                        //$test .= $_POST['provincename-contractor-'.$k]." ".$_POST['cityname-contractor-'.$k]." ".$_POST['areaname-contractor-'.$k]." ";
                    }
                }
                else{
                    $condition = false;
                    //$response = json_encode("It got here1");
                }

                //Ensure that if the business is VAT registered to store appropriate details like the business registration number and the business's vat number
                if(isset($_POST['ignore-exampleSwitch'])) {
                    if($_POST['ignore-exampleSwitch'] == "on"){
                        //TODO: not 100% sure on this if statement must definitely test it
                        if(!isset($_POST['reg-contractor']) || !isset($_POST['vat-contractor']) ) {
                            $condition = false;
                        }
                        if(isset($_POST['reg-contractor'])){
                            $boolean = SebenzaServer::isUnique(intval($_POST['reg-contractor']), "BusinessRegistrationNum", "contractor");
                            if (!$boolean)
                                $test *= 7;

                        }
                        if(isset($_POST['vat-contractor'])){
                            $boolean = SebenzaServer::isUnique(intval($_POST['vat-contractor']), "BusinessVatNum", "contractor");
                            if (!$boolean)
                                $test *= 5;
                        }


                    }
                }
                else{
                    $condition = false;
                    //$response = json_encode("It got here3");
                }


                //$test .= " ".$_POST['ignore-sillsAdded-contractor']." ".$_POST['ignore-locationsAdded-contractor']." ".$_POST['ignore-exampleSwitch']." ";
                //Ensure all the rest of the variables are set
                if($condition) {

                    if (isset($_POST['name-contractor']) && isset($_POST['surname-contractor']) && isset($_POST['username-contractor']) && isset($_POST['password-contractor']) && isset($_POST['confirmPassword-contractor']) && isset($_POST['email-contractor']) && isset($_POST['confirmEmail-contractor']) && isset($_POST['cellnumber-contractor']) && isset($_POST['homeNumber-contractor']) && isset($_POST['busName']) && isset($_POST['address-contractor']) && isset($_POST['areaname-contractor-0']) && isset($_POST['cityname-contractor-0']) &&isset($_POST['business-description-contractor']) && isset($_POST['business-hours-from-contractor']) && isset($_POST['business-hours-to-contractor']) && isset($_POST['provincename-contractor-0'])) {
                        $boolean = SebenzaServer::isUnique($_POST['busName'],"BusinessName", "contractor");
                        if(!$boolean)
                            $test *= 11;
                        $boolean = SebenzaServer::isUnique($_POST['email-contractor'],"Email", "registered_users");
                        if(!$boolean)
                            $test *= 3;
                        $boolean = SebenzaServer::isUnique($_POST['username-contractor'],"Username", "registered_users");
                        if(!$boolean)
                            $test *= 2;


                        if($test == 1){
                            $response = json_encode(SebenzaServer::register([$_POST['username-contractor'], $_POST['email-contractor'], $_POST['cellnumber-contractor'], $_POST['password-contractor'], $_POST['surname-contractor'], $_POST['name-contractor'], $_POST['ignore-locationsAdded-contractor'],$_POST['busName'],$_POST['address-contractor'],$_POST['ignore-sillsAdded-contractor'],$_POST['business-description-contractor'],$_POST['business-hours-from-contractor'],$_POST['business-hours-to-contractor'],$_POST['ignore-availability-contractor']], 'contractor'));
                        }
                        else{
                            $response = $test;
                        }

                        //$response = json_encode("It got here");
                    } else {
                        $response = json_encode(false);
                        //$response = json_encode("It got here2");
                    }
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'register-tradeworker':
                if(isset($_POST['username']) && isset($_POST['name']) && isset($_POST['surname']) && isset($_POST['password']) && isset($_POST['email']) && isset($_POST['cellnumber']) && isset($_POST['homeNumber'])){
                    $response = json_encode(SebenzaServer::register([$_POST['username'],$_POST['email'],$_POST['cellnumber'],$_POST['password'],$_POST['surname'],$_POST['name']],'tradeworker'));
                } else{
                    $response = json_encode(false);
                }
                break;
            case 'register-homeuser':
                if(isset($_POST['username']) && isset($_POST['name']) && isset($_POST['surname']) && isset($_POST['password']) && isset($_POST['email']) && isset($_POST['cellnumber']) && isset($_POST['homeNumber'])){
                    $response = json_encode(SebenzaServer::register([$_POST['username'],$_POST['email'],$_POST['cellnumber'],$_POST['password'],$_POST['surname'],$_POST['name']],'homeuser'));
                } else{
                    $response = json_encode(false);
                }
                break;
            case 'fetch-job-requests':
                if(SebenzaServer::serverSecurityCheck()){
                    $result = SebenzaServer::fetchUserType();
                    //Due to information being sent back being different for all the users switch case to check the type of user before calling the function
                    $response = json_encode($result);
                    switch ($result){
                        case "1":
                            //Contractor
                            $response = json_encode("Should be dealing with contractor request job management");
                            break;
                        case "2":
                            //Homeuser
//                            $response = json_encode("Should be dealing with homeuser request job management");
                            $response = json_encode(SebenzaServer::fetchHomeuserJobRequests(SebenzaServer::fetchSessionHandler()->getSessionVariable("UserID")));
                            break;
                        case "0":
                            //Tradeworker
                            $response = json_encode("Should be dealing with tradeworker request job management");
                            break;
                        default:
                            $response = json_encode("Unrecognized");
                            break;
                    }


                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'fetch_work_types':
                $response = json_encode(SebenzaServer::returnWorkTypes());
//                $response = json_encode("This is a test");
                break;
            case 'homeuser-rTradeworker':
                $condition = true;

                if(isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                    for($j =0;$j<$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'];$j++){
                        if(!isset($_POST['homeuser-rTradeworker-work-type-'.$j]) || !isset($_POST['nTradeworkers-homeuser-rTradeworker-'.$j]) || !isset($_POST['job-description-homeuser-rTradeworker-'.$j])){
                            $condition = false;
                        }
                    }

                }
                else{
                    $condition = false;
                }

                if($condition){
                    if(isset($_POST['commencement-homeuser-rTradeworker']) && isset($_POST['homeuser-rTradeworker-street_number']) && isset($_POST['homeuser-rTradeworker-route']) && isset($_POST['homeuser-rTradeworker-sublocality_level_1']) && isset($_POST['homeuser-rTradeworker-locality']) && isset($_POST['homeuser-rTradeworker-administrative_area_level_1']) && isset($_POST['homeuser-rTradeworker-postal_code']) && isset($_POST['homeuser-rTradeworker-country']) && isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                        $condition = SebenzaServer::homeUserRequestTradeworker([$_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'],$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker']]);
//                        $condition = true;
                    }
                    else{
                        $condition = false;
                    }
                }

                $response = json_encode($condition);
                break;
            default:
                //If the action was not one of the handled cases, respond appropriately
                $response = json_encode("Request not recognised.");
                break;
        }
    }
    echo $response;
//    var_dump(json_encode($_POST));
    //Flush the output buffer
    SebenzaServer::stop();
}