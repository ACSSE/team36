<?php
/**
 * Created by PhpStorm
 * Date: 2016/02/15
 * Time: 1:16 AM
 */
include_once $_SERVER['DOCUMENT_ROOT']."/php/classes/Session.php";
include_once $_SERVER['DOCUMENT_ROOT'] . "/php/classes/DatabaseHandler.php";
class SebenzaServer {
    //Take note a method has been added to add to security please just check it out and use it in your methods that you make, I will refactor them into the other applicable methods there may be one or two that won't
    //use it like login
    public static function start() {
        //Used in open-html.php and AJAX handling below
        //Start output buffering - server only sends the output once per page vs for every "echo" or "print" command
        ob_start();
        //Set the server's default timezone - time is important for many of php's functions
        if (date_default_timezone_get()!=="Africa/Johannesburg") {
            date_default_timezone_set("Africa/Johannesburg");
        }
    }

    public static function stop() {
        //Used in close-html.php and AJAX handling below
        //Flush the output buffer - send all the output generated by the server to the client now
        ob_end_flush();
    }

    public static function testServer($username){

        //Validate the function's params
        if (is_string($username)) {
            //Get an instance of the database and session handlers
            $dbHandler = self::fetchDatabaseHandler();
            //Fetch the relevant user's data
            $dbHandler->runCommand("SELECT * FROM REGISTERED_USER WHERE `Username` = ?", $username);
            $result = $dbHandler->getResults();
            //If a single result was returned from database
            if (count($result) == 1) {
                return $result;
            }
        }
        return $result;

    }

    public static function login($username, $password):bool {
        //Assume failure
        $successfulLogin = false;
        //Validate the function's arguments
        if (is_string($username) && is_string($password)) {
            //Get an instance of the database and session handlers
            $dbHandler = self::fetchDatabaseHandler();
            $sessionHandler = self::fetchSessionHandler();
            //Fetch the relevant user's data
            $dbHandler->runCommand("SELECT `Password`,`UserID`,`Username`,`TypeOfUser`,`Confirmation` FROM REGISTERED_USER WHERE `Username` = ?", $username);
            $result = $dbHandler->getResults();
            //If a single result was returned and the password matches the hashed password stored in the database
            if (count($result) == 1 && password_verify($password, $result[0]['Password'])) {
                //Mark success
                $successfulLogin = true;
                //Set any variables you want access to in the session
                $sessionHandler->setSessionVariable("UserID",$result[0]['UserID']);
                $sessionHandler->setSessionVariable("Username", $result[0]['Username']);
                $sessionHandler->setSessionVariable("UserType", $result[0]['TypeOfUser']);
                $sessionHandler->setSessionVariable("UserConfirmation", $result[0]['Confirmation']);
            }
        }
        return $successfulLogin;
    }

    //Due to this function relying on redirect, it must happen in the beginning of the open-html.php file too.
    public static function logout() {
        //Clear and end the current session
        self::fetchSessionHandler()->endSession();
    }

    //This must be called before any output is sent to the client, so in the beginning of the open-html.php file.
    public static function redirect($url) {
        if (is_string($url)) {
            //Redirect the server
            header("Location: " . $url);
            //End script execution of current page
            exit(0);
        }
    }
    //TODO:The following method should be run to ensure that a session is in session before any other method is run, just for added security, there may be more security checks one can do - research
    public static function serverSecurityCheck(): bool {
        $sessionHandler = self::fetchSessionHandler();
        $result = $sessionHandler->getSessionVariable("UserID");

        if($result != null)
            return true;
        else
            return false;
    }

    public static function fetchDatabaseHandler():DatabaseHandler {
        $session = self::fetchSessionHandler();
        if ($session->exists("dbHandler")) {
            $dbHandler = $session->getSessionVariable("dbHandler");
        } else {
            //$dbHandler = new DatabaseHandler("eu-cdbr-azure-west-d.cloudapp.net","bb5f5a5205e9c5","74c8233a","sebenzasa_database");
            $dbHandler = new DatabaseHandler("localhost","root","Sebenza","SebenzaSA_Database");
            $session->setSessionVariable("dbHandler", $dbHandler);
        }
        return $dbHandler;
    }

    public static function createAndResetDatabase():bool {
        //$dbHandler = new DatabaseHandler("eu-cdbr-azure-west-d.cloudapp.net","bb5f5a5205e9c5","74c8233a","");
        $dbHandler = new DatabaseHandler("localhost","root","Sebenza","");
        $success = $dbHandler->executeSQLScriptFile("database/SebenzaSA_Database.sql");
        self::fetchSessionHandler()->setSessionVariable("dbHandler", $dbHandler);
        return $success;
    }

    public static function fetchSessionHandler():Session {
        $session = new Session();
        if ($session->exists('sessionHandler')) {
            $session = $session->getSessionVariable('sessionHandler');
        } else {
            $session->setSessionVariable('sessionHandler', $session);
        }
        return $session;
    }

    public static function hashPassword($password):string {
        return password_hash($password,PASSWORD_DEFAULT);
    }
    
    public static function addNotification($userID, $message):bool {
        $returnValue = false;
        if (is_int($userID) && is_string($message)) {
            $dbHandler = self::fetchDatabaseHandler();
            $command = "INSERT INTO `NOTIFICATION` (`UserID`,`Message`) VALUES (?, ?)";
            $returnValue = $dbHandler->runCommand($command, $userID, $message);
        }
        return $returnValue;
    }

    public static function pullNotifications():array {
        $returnValue = array();
        if (self::fetchSessionHandler()->exists('UserID')) {
            $uid = self::fetchSessionHandler()->getSessionVariable('UserID');
            $command = "SELECT `NotificationID`,`Message` FROM `NOTIFICATION` WHERE `UserID` = ? AND `Pulled` = false AND `Pushed` = false AND `Expired` = false";
            $dbHandler = self::fetchDatabaseHandler();
            if ($dbHandler->runCommand($command, $uid)) {
                $results = $dbHandler->getResults();
                if (count($results) > 0) {
                    foreach ($results as $result) {
                        $returnValue[] = $result['Message'];
                        $dbHandler->runCommand("UPDATE `NOTIFICATION` SET `Pulled` = true WHERE `NotificationID` = ?", $result['NotificationID']);
                    }
                }
            }
        }
        return $returnValue;
    }
    /*The following function will register the user according to his type, confirmation of email will be required from all
    users, to ensure that the email account exists.*/
    public static function register(array $input, $type)
    {
        $locationsToRemove = 0;
        $locationsPerUserToRemove = 0;
        $skillsPerUserToRemove = 0;
        //should be an integer that will never exist within the database
        $id = -5;
        $email = $input[1];
        $username = $input[0];
        $keyToSend = self::hashPassword($email + $username + time());
        //TODO: Uncomment to allow emails to be sent
        $link = "http://localhost:31335/index.php?email=".$email."&key=".$keyToSend;
        $title = "Sebenza South Africa";
        $emailConMessage = '<b>Thank you for registering with SebenzaSA!</b><br/> please click on the following link for confirmation<a href="'.$link.'">'.$title.'</a><br/>If it was not you that registered for the SebenzaSA site, you can ignore this email';
        $condition = self::mailClient($email,$keyToSend,$emailConMessage);
//        $condition = true;
        //$test = "";
        $returnValue = false;
        if ($condition) {
            switch ($type) {
                case 'contractor':
                    //$test .= "Working with contractor";
                    $numLocations = $input[6];
                    $numSkills = $input[9];
                    $busDescription = $input[10];
                    $busTimeFrom = $input[11];
                    $busTimeTo = $input[12];
                    $contractorAvailability = $input[13];
                    if ($contractorAvailability == "on") {
                        $contractorAvailability = 1;
                    } else if ($contractorAvailability == "off") {
                        $contractorAvailability = 0;
                    }
                    $locationID = array($numLocations);
                    $locationsToRemove = array($numLocations);
                    $locationsToRemoveAmount = 0;
                    $command = "SELECT `locationID`,`locationName` FROM `LOCATIONS` WHERE `locationName` = ?";
                    $command1 = "INSERT INTO `LOCATIONS` (`locationName`, `Coordinates`, `Region`, `Province`, `City`) VALUES (?,?,?,?,?)";
                    $dbHandler = self::fetchDatabaseHandler();
                    //The following will run through all the areas added by the contractor and areas which don't exist will be added to the database, consider having an admin accept and reject areas according to a standard
                    $condition = true;
                    $region = "A";
                    $coordinates = "0:0";

                    for ($k = 0; (($k < $numLocations) && $condition); $k++) {
                        //$test .= $k." ";
                        if ($dbHandler->runCommand($command, $_POST["areaname-contractor-" . $k])) {
                            //$test .= " Running through areas: ";
//                            //Should always return true, even if a matching area is not found, then that area will be added.
                            $result = $dbHandler->getResults();

                            if (count($result) == 0) {
//                                //If the area does not exist in the database add it and gain a handle on the id
                                $area = $_POST["areaname-contractor-" . $k];
                                $province = $_POST["provincename-contractor-" . $k];
                                $city = $_POST["cityname-contractor-" . $k];
                                //TODO: coordinates can be requested through google maps api - extra - may make marking a google map for information a lot easier later
                                if ($dbHandler->runCommand($command1, $area, $coordinates, $region, $province, $city)) {
                                    //$test .= "Area added: ".$area." ".$province." ".$city."\n";
                                    $locationID[$k] = $dbHandler->getInsertID();
//                                    $locationsToRemove = $k + 1;
                                    $locationsToRemove[++$locationsToRemoveAmount] = $dbHandler->getInsertID();
                                } else {
                                    //$test .= "no locations added from k =".$k;
                                    //$k = $numLocations + 5;
                                    $condition = false;
                                    $returnValue = false;
                                    //dbhandler has failed to run for some reason remove all locations added to LOCATIONS
                                }
                            } else {
                                //$test .= " Areas to run through: ".count($result)."The values contained withing the result: id - ".$result[0]['locationID']." Name - ".$result[0]['locationName'];
//                                //If the area exists in the database gain a handle on the areaID - there should only be one returned result as the area names should be unique
                                $locationID[$k] = $result[0]['locationID'];
                            }
                        } else {
                            //dbhandler has failed to run for some reason remove all locations added to LOCATIONS if any
                            //$test .= "Couldnt run dbhandler to locate areas";
//                            $locationsToRemove = $k - 1;
                            //$k = $numLocations + 5;
                            $condition = false;
                            $returnValue = false;
                        }
                    }
                    //Due to LOCATIONS having multiple inserts which run in a for loop $condition exists, can be done when the for loop reaches the last position.
                    if ($condition) {
                        $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name`) VALUES (?,?,?,?,?,?,?)";
                        $contactNumber = $input[2];
                        $password = self::hashPassword($input[3]);
                        $name = $input[5];
                        $surname = $input[4];
                        if ($dbHandler->runCommand($command, $username, $email, $contactNumber, 1, $password, $surname, $name)) {
                            //$test .= "\nSuccessfully added the following user to REGISTERED_USER: ".$username." ".$email." ".$contactNumber." "."1"." ".$password." ".$surname." ".$name;
                            //once users are inserted into the REGISTERED_USER table appropriate data will be inserted into the CONFIRMATIONS table
                            $id = $dbHandler->getInsertID();
                            $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                            if ($dbHandler->runCommand($command, $id, $keyToSend)) {
                                //once users are inserted into the CONFIRMATIONS table appropriate data will be inserted into the CONTRACTOR table
                                $busName = $input[7];
                                $busAddress = $input[8];
                                //The following is to check whether the contractor is VAT registered or not
                                if ($_POST['ignore-exampleSwitch'] == "on") {
                                    //This will insert into the database taking into account the business is - VAT registered
                                    //$test .= "\nInserting details for VAT registered entity";
                                    $command = "INSERT INTO `CONTRACTOR` (`UserID`, `BusinessRegistrationNum`, `BusinessVatNum`, `BusinessAddress`, `BusinessName`, `VatRegistered`, `BusinessDescription`,`BusinessHoursFrom`,`BusinessHoursTo`,`Availability`) VALUES (?,?,?,?,?,?,?,?,?,?)";
                                    if ($dbHandler->runCommand($command, $id, $_POST['reg-contractor'], $_POST['vat-contractor'], $busAddress, $busName, 1, $busDescription, $busTimeFrom, $busTimeTo, $contractorAvailability)) {
                                        //$test .= "\nThe following entries have been inserted into CONTRACTOR: ".$id." ".$_POST['reg-contractor']." ".$_POST['vat-contractor']." ".$busAddress." ".$busName;
//                                        $condition2 = true;
                                        $command = "INSERT INTO `SPECIALIZATIONS_PER_USER` (`UserID`, `workTypeID`) VALUES (?,?)";
                                        for ($j = 0; (($j < $numSkills) && $condition); $j++) {
                                            if ($dbHandler->runCommand($command, $id, $_POST['contractor-work-type-' . $j])) {

                                            } else {
                                                $condition = false;
                                            }
                                        }
                                        if ($condition) {
                                            $command = "INSERT INTO `LOCATIONS_PER_USER` (`UserID`, `locationID`) VALUES (?,?)";
                                            for ($k = 0; $k < $numLocations && $condition; $k++) {
                                                $returnValue = $dbHandler->runCommand($command, $id, $locationID[$k]);
                                                if ($returnValue) {

                                                } else {
                                                    $condition = false;

                                                }
                                            }
                                            if (!$condition) {
                                                $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                                for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                                    //Technically one should test if this fails too
                                                    $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                                }
                                                $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $returnValue = false;
                                            }
                                        } else {
                                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                            for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                                //Technically one should test if this fails too
                                                $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                            }
                                            $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $returnValue = false;
                                        }

                                    } else {
                                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                        for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                            //Technically one should test if this fails too
                                            $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                        }

                                        $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command, $id);
                                        $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command, $id);
                                        $returnValue = false;
                                    }
                                } else {
                                    //This will insert into the database taking into account the business is not - VAT registered
                                    //$test .= "\nInserting details for a non VAT registered entity";
                                    $command = "INSERT INTO `CONTRACTOR` (`UserID`, `BusinessAddress`, `BusinessName`,`VatRegistered`, `BusinessDescription`,`BusinessHoursFrom`,`BusinessHoursTo`,`Availability`) VALUES (?,?,?,?,?,?,?,?)";
                                    if ($dbHandler->runCommand($command, $id, $busAddress, $busName, 0, $busDescription, $busTimeFrom, $busTimeTo, $contractorAvailability)) {
                                        //$test .= "\nThe following entries have been inserted into CONTRACTOR: ".$id." ".$busAddress." ".$busName;
                                        $command = "INSERT INTO `SPECIALIZATIONS_PER_USER` (`UserID`, `workTypeID`) VALUES (?,?)";
                                        for ($j = 0; ($j < $numSkills) && $condition; $j++) {
                                            if ($dbHandler->runCommand($command, $id, $_POST['contractor-work-type-' . $j])) {
                                                //$test .= "\nThe following entries have been inserted into SPECIALIZATIONS_PER_USER: ".$id." ".$_POST['contractor-work-type-'.$j];
                                            } else {
                                                //$test .= "\nFailed to insert specialization";
                                                $condition = false;
                                            }
                                        }
                                        if ($condition) {
                                            //$test .= "All specializations per user have been added successfully";
                                            $command = "INSERT INTO `LOCATIONS_PER_USER` (`UserID`, `locationID`) VALUES (?,?)";
                                            for ($k = 0; $k < $numLocations && $condition; $k++) {
                                                //$test .= "\nInserting in locations:";
                                                $returnValue = $dbHandler->runCommand($command, $id, $locationID[$k]);
                                                if ($returnValue) {
                                                    //$test .= "The following locations have been added to the user: ".;
                                                } else {
                                                    $condition = false;
                                                }
                                            }
                                            if (!$condition) {
                                                $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                                for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                                    //Technically one should test if this fails too
                                                    $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                                }
                                                $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                                $dbHandler->runCommand($command, $id);
                                                $returnValue = false;
                                            }
                                        } else {
                                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                            for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                                //Technically one should test if this fails too
                                                $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                            }
                                            $command = "DELETE FROM `CONTRACTOR` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                            $dbHandler->runCommand($command, $id);
                                            $returnValue = false;
                                        }

                                    } else {
                                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                        for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                            //Technically one should test if this fails too
                                            $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                        }
                                        $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command, $id);
                                        $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                        $dbHandler->runCommand($command, $id);
                                        $returnValue = false;
                                    }
                                }
                            } else {
                                $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                                for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                    //Technically one should test if this fails too
                                    $dbHandler->runCommand($command, $locationsToRemove[$k]);
                                }
                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command, $id);
                                $returnValue = false;
                            }
                            //TODO: A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries
                        } else {
                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                            for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                                //Technically one should test if this fails too
                                $dbHandler->runCommand($command, $locationsToRemove[$k]);
                            }
                            $returnValue = false;
                        }
                    } else {
                        $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                        for ($k = 0; $k < $locationsToRemoveAmount; $k++) {
                            //Technically one should test if this fails too
                            $dbHandler->runCommand($command, $locationsToRemove[$k]);
                        }
                        $returnValue = false;
                    }
                    return $returnValue;
                    break;
                case 'homeuser':
                    $returnValue = 1;
                    //A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries
                    $name = $input[2];
                    $idNumber = $input[7];
                    $surname = $input[3];
                    $password = self::hashPassword($input[4]);
                    $cellNumber = $input[5];
                    $homeNumber = $input[6];
                    $subscription = $input[8];
                    $streetNum = $input[9];
                    $route = $input[10];
                    $subLocality = $input[11];
                    $locality = $input[12];
                    $province = $input[13];
                    $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name` , `PersonalID`) VALUES (?,?,?,?,?,?,?,?)";
                    $dbHandler = self::fetchDatabaseHandler();
                    if($dbHandler->runCommand($command,$username,$email,$cellNumber,2,$password,$surname,$name,$idNumber)){
                        //TODO:Insert into homeuser table, and locations per homeuser
                        $id = $dbHandler->getInsertID();
                        $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                        if($dbHandler->runCommand($command, $id, $keyToSend)) {
                            $command = "INSERT INTO `HOMEUSER` (`UserID`,`Subscribed`) VALUES (?,?)";
                            if ($dbHandler->runCommand($command, $id, $subscription)) {
                                $command = "INSERT INTO `HOMEUSER_LOCATIONS` (`UserID`,`StreetNumber`,`Route`,`Sublocality`,`Locality`,`AdministrativeArea`) VALUES (?,?,?,?,?,?)";

                                if (!$dbHandler->runCommand($command, $id, $streetNum, $route, $subLocality, $locality, $province)) {
                                    //remove from HOMEUSER,Confirmations and REGISTERED_USER and report failed

                                    $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                    $dbHandler->runCommand($command,$id);
                                    $command = "DELETE FROM `HOMEUSER_LOCATIONS` WHERE `UserID` = ?";
                                    $dbHandler->runCommand($command,$id);
                                    $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                    $dbHandler->runCommand($command,$id);
                                    $returnValue *= 7;
                                }
                            } else {
                                //remove from REGISTERED_USER and Confirmations and return false
                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command,$id);
                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command,$id);
                                $returnValue *= 7;
                            }
                        }
                        else{
                            //Remove from REGISTERED_USER and return false
                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $returnValue *= 7;
                        }
                    }
                    else{
                        //failed to insert entries into database
                        $returnValue *= 7;
                    }
                    return $returnValue;
                    break;
                case 'tradeworker':
                    $returnValue = 1;
                    $locationsToRemove = array();
                    $name = $input[2];
                    $idNumber = $input[3];
                    $surname = $input[4];
                    $password = self::hashPassword($input[5]);
                    $cellNumber = $input[6];
                    $homeNumber = $input[7];
                    $availability = $input[8];
                    if($availability){
                        $availability = 1;
                    }
                    else
                        $availability = 0;
                    $numLocations = $input[9];
                    $numSkills = $input[10];
                    $command = "INSERT INTO `REGISTERED_USER` (`Username`, `Email`, `ContactNumber`, `TypeOfUser`, `Password`, `Surname`, `Name` , `PersonalID`) VALUES (?,?,?,?,?,?,?,?)";
                    $skillsAdded = false;
                    $dbHandler = self::fetchDatabaseHandler();
                    if ($dbHandler->runCommand($command, $username, $email, $cellNumber, 0, $password, $surname, $name, $idNumber)) {
                        $id = $dbHandler->getInsertID();
                        $command = "INSERT INTO `CONFIRMATIONS` (`UserID`, `Key`) VALUES (?,?)";
                        if($dbHandler->runCommand($command, $id, $keyToSend)){
                            $command = "INSERT INTO `TRADE_WORKER` (`UserID`,`Availability`,`DateWorked`) VALUES (?,?,?)";
                            if($dbHandler->runCommand($command, $id, $availability,date("Y-m-d"))){
                                $skillsAdded = true;
                                $command = "INSERT INTO `SPECIALIZATIONS_PER_USER` (`UserID`,`workTypeID`) VALUES (?,?)";
                                for($r = 0; $r < $numSkills;$r++){
                                    if(!$dbHandler->runCommand($command,$id,$_POST["tradeWorker-work-type-".$r])){
                                        $skillsAdded &= false;
                                    }
                                }
                            }
                            else{
                                //remove entries from registered user and confirmations and report failure
                                $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command,$id);
                                $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                                $dbHandler->runCommand($command,$id);
                                $returnValue *= 7;
                            }

                        }
                        else{
                            //remove entries from registered user and report failure
                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $returnValue *= 7;
                        }
                        //A timer could run to check the date since the email was sent so that if confirmation doesn't occur within a month or two the entry in the database can be removed for username recycling purposes and so that the database doesn't get full with unnecessary entries
                    }
                    else{
                        //report failure
                    }
                    $locationsAdded = true;
                    if($skillsAdded){
                        //Add all the locations
                        $locationsArray = array();
                        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `locationName` = ?";
                        for($t = 0; $t < $numLocations; $t++){
                            $dbHandler->runCommand($command,$_POST["areaname-tradeWorker-".$t]);
                            $result = $dbHandler->getResults();
                            if(count($result) > 0){
                                array_push($locationsArray,$result[0]['locationID']);
                            }
                            else{
                                $command = "INSERT INTO `LOCATIONS` (`locationName`,`City`,`Province`) VALUES (?,?,?)";
                                if($dbHandler->runCommand($command,$_POST["areaname-tradeWorker-".$t],$_POST["provincename-tradeWorker-".$t],$_POST["cityname-tradeWorker-".$t])){
                                    $locationID = $dbHandler->getInsertID();
                                    array_push($locationsArray,$locationID);
                                    array_push($locationsToRemove,$locationID);
                                }
                                else{
                                    $locationsAdded &= false;
                                }
                            }
                        }

                        $locationsPerUser = true;
                        if($locationsAdded){
                            //add the locations per user according to the locationID
                            $command = "INSERT INTO `LOCATIONS_PER_USER` (`UserID`,`locationID`) VALUES (?,?)";
                            for($t = 0; $t < $numLocations; $t++){
                                if(!$dbHandler->runCommand($command,$id,$locationsArray[$t])){
                                    $locationsPerUser &= false;
                                }
                            }
                        }
                        else{
                            //Remove which ever locations were added to locations and remove from SPECIALIZATIONS_PER_USER,REGISTERED_USERS,CONFIRMATIONS,TRADEWORKER report failure
                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                            for($e = 0;$e < count($locationsToRemove);$e++){
                                $dbHandler->runCommand($command,array_pop($locationsToRemove));
                            }
                            $command = "DELETE FROM `TRADE_WORKER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $returnValue *= 7;
                        }

                        if(!$locationsPerUser){
                            //Remove which ever locations were added to locations per user and remove from SPECIALIZATIONS_PER_USER,REGISTERED_USERS,CONFIRMATIONS,TRADEWORKER,LOCATIONS report failure
                            $command = "DELETE FROM `LOCATIONS_PER_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `LOCATIONS` WHERE `locationID` = ?";
                            for($e = 0;$e < count($locationsToRemove);$e++){
                                $dbHandler->runCommand($command,array_pop($locationsToRemove));
                            }
                            $command = "DELETE FROM `TRADE_WORKER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                            $dbHandler->runCommand($command,$id);
                            $returnValue *= 7;
                        }
                        else{
                            //All entries were added to relevant tables correctly
                            $returnValue = 1;
                        }
                    }
                    else{
                        //Remove the from SPECIALIZATIONS_PER_USER,REGISTERED_USERS,CONFIRMATIONS,tradeworker report failure
                        $command = "DELETE FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                        $dbHandler->runCommand($command,$id);
                        $command = "DELETE FROM `TRADE_WORKER` WHERE `UserID` = ?";
                        $dbHandler->runCommand($command,$id);
                        $command = "DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                        $dbHandler->runCommand($command,$id);
                        $command = "DELETE FROM `REGISTERED_USER` WHERE `UserID` = ?";
                        $dbHandler->runCommand($command,$id);
                        $returnValue *= 7;
                    }
                    return $returnValue;
                    break;
                default:
                    return $returnValue;
                    break;
            }
        }
        else{
            $returnValue = 1;
            $returnValue *= 101;
        }
        return $returnValue;

    }

    public static function mailClient($to,$key,$message):bool{
        require $_SERVER['DOCUMENT_ROOT'] ."/php/externalClasses/PHPMailer-master/PHPMailer-master/PHPMailerAutoload.php";
        $mail = new PHPMailer;
        //Remember to input your details here
        //$mail->SMTPDebug = 3;                               // Enable verbose debug output

        $mail->isSMTP();                                      // Set mailer to use SMTP
        $mail->Host = 'smtp.gmail.com';  // Specify main and backup SMTP servers
        $mail->SMTPAuth = true;                               // Enable SMTP authentication
        $mail->Username = '215040496@student.uj.ac.za';                 // SMTP username
        $mail->Password = '@Uj-436518';                           // SMTP password
        $mail->SMTPSecure = 'tls';                            // Enable TLS encryption, `ssl` also accepted
        $mail->Port = 587;                                    // TCP port to connect to
        $mail->IsHTML(true);
        $mail->setFrom('215040496@student.uj.ac.za', 'Mailer');
        $mail->addAddress($to, 'Joe User');       // Name is optional
        $mail->addReplyTo('215040496@student.uj.ac.za', 'Information');

        $mail->Subject = 'SebenzaSA Confirmation';
        $mail->Body    = $message;
        return $mail->send();
    }
    //The following function is used to confirm a user who has clicked on the link within an email he received
    public static function userConfirm($email,$key):bool{
        $returnValue = false;
        $command = "SELECT `UserID`,`Confirmation` FROM `REGISTERED_USER` WHERE `Email` = ?";
        $dbhandler = self::fetchDatabaseHandler();
        //Check whether the email exists within the database
        if($dbhandler->runCommand($command,$email)){
            $results = $dbhandler->getResults();

            //Check whether the user has been confirmed or not
            if(count($results)> 0)
                if(!$results[0]['Confirmation']){
                    $command = "SELECT `Key` FROM `CONFIRMATIONS` WHERE `UserID` = ?";
                    //Retrieve the key associated with the user upon the account registration
                    if($dbhandler->runCommand($command,$results[0]['UserID'])) {
                        $storedKey = $dbhandler->getResults();
                        //Test whether the keys from database and from email are the same value
                        if ($storedKey[0]["Key"] === $key) {
                            $command = "UPDATE `REGISTERED_USER` SET `Confirmation` = TRUE WHERE `UserID`=?";
                            //Set the confirmation to true
                            if ($dbhandler->runCommand($command, $results[0]['UserID'])) {
                                //Delete the entry required to test confirmation
                                if($dbhandler->runCommand("DELETE FROM `CONFIRMATIONS` WHERE `UserID` = ?", $results[0]['UserID'])){
                                    $returnValue = true;
                                }
                            }
                        }
                    }
                }
        }
        return $returnValue;
    }

    public static function returnWorkTypes($workTypeID = null){
        if(is_null($workTypeID)) {
            $dbhandler = self::fetchDatabaseHandler();
            $command = "Select `WorkType`,`workTypeID` FROM SPECIALIZATIONS";
            $dbhandler->runCommand($command);
            $results = $dbhandler->getResults();
        }
        else{
            $dbhandler = self::fetchDatabaseHandler();
            $command = "Select `WorkType` FROM SPECIALIZATIONS WHERE `workTypeID` = ?";
            $dbhandler->runCommand($command,$workTypeID);
            $results = $dbhandler->getResults();
        }
        return $results;
    }

    //The following function is the initial implementation of fetching the next available user, this doesn't take experience into account
    //currently just checks if TW available in $area for a given $workType will check when was the last time they worked if there is more than one and send the one
    //with the date that is the lowest.
    public static function fetchAvailableTradeworker($workTypeID,$areaID,$numRequests,$requestID){
        $returnValue = 1;
        //Fetch userID's from LOCATIONS_PER_USER,SPECIALIZATIONS_PER_USER where locations equal areaID and work types equal workTypeID
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `UserID` FROM `LOCATIONS_PER_USER` WHERE `locationID` = ?";
        $dbhandler->runCommand($command,$areaID);
        $locationsResults = $dbhandler->getResults();
        $command = "SELECT `UserID` FROM `SPECIALIZATIONS_PER_USER` WHERE `workTypeID` = ?";
        $dbhandler->runCommand($command,$workTypeID);
        $userResults = $dbhandler->getResults();
        $applicants = [];
        //If there are userIDs returned check which ones match and store them in an array
        if(count($locationsResults)>0 && count($userResults)>0){
            for($j = 0;$j<count($locationsResults);$j++){
                for($k = 0;$k<count($userResults);$k++){
                    if($locationsResults[$j]['UserID'] == $userResults[$k]['UserID']){
                        array_push($applicants,$userResults[$k]['UserID']);
                    }
                }
            }
        }
        else{
            if(count($locationsResults) == 0)
                $returnValue *= -5;
            if(count($userResults) == 0)
                $returnValue *= -7;
        }
        //At this point if the applicants array has any elements in it, it means that there exists a user who has the skill type required and has listed the area as an area he is under
        $applicantsToSend = [];
        if(count($applicants) > 0){
            $counter = 0;
            $condition = true;
            for($l = 0; $l <count($applicants); $l++){
                $command = "SELECT `UserID`,`DateWorked` FROM `TRADE_WORKER` WHERE `UserID` = ? AND `Availability`=TRUE";
                $dbhandler->runCommand($command,intval($applicants[$l]));
                $result = $dbhandler->getResults();
                //This will take only the tradeworkers who are available out and put them in an array
                if(count($result) > 0){
//                    $returnValue .= "\n The following is the available user for that area: ".$result[0]['UserID']." : ".$result[0]['DateWorked'];
                    array_push($applicantsToSend,$result[0]);
                }
            }
        }
        else{
            $returnValue *= -13;
            //this should return that no tradeworkers exist in that location with that specific skill required
        }

        //Remove all tradeworkers already related to the the request
        $command = "SELECT * FROM `QUOTE` WHERE `RequestID` = ? AND `RequestedUser` = ?";
        $continue = true;

        if(count($applicantsToSend) > 0){
            for($e = 0; $e < count($applicantsToSend);$e++){
                $dbhandler->runCommand($command,$requestID,$applicantsToSend[$e]['UserID']);
                $result = $dbhandler->getResults();
                if(count($result) > 0){

                    unset($applicantsToSend[$e]);
//                    array_slice($applicantsToSend,$e, 1);
                    $toRemove = false;
                }
            }
        }
        $applicantsToSend = array_values($applicantsToSend);

        //This will fail if no users are available of users in given area and work type
        //The process of comparing which tradeworker to take currently involves only comparing the last time worked(date) and will return the tradeworker with the lowest date worked

        if(count($applicantsToSend) > 0){
            $returnValue =[];
            if(count($applicantsToSend) == 1){
                 array_push($returnValue,$applicantsToSend[0]['UserID']);
            }
            else if(count($applicantsToSend) <= $numRequests ){
                for($e = 0; $e < count($applicantsToSend);$e++){
                    array_push($returnValue,$applicantsToSend[$e]['UserID']);
                }
            }
            else{
                //TODO: Check that the tradeworker requested doesn't already have a notification else till he accepts the job his date will remain the lowest perhaps allow for 5 notifications per tradeworker before removing the id from the valid list
                //TODO: check amount of notifications
                $counter = 0;
                while($counter < $numRequests){
                    $leastIndex = 0;
                    $minDate = DateTime::createFromFormat("Y-m-d",$applicantsToSend[0]['DateWorked']);
                    $dbhandler->runCommand("SELECT `ActiveWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$applicantsToSend[0]['UserID']);
                    $result = $dbhandler->getResults();
                    $activeWorkRequests = $result[0]['ActiveWorkRequests'];
//                $returnValue = "This is a test: ".$applicantsToSend[0]['UserID'];
                    for($m = 1;$m < count($applicantsToSend);$m++){
                        $date2 = DateTime::createFromFormat("Y-m-d",$applicantsToSend[$m]['DateWorked']);
                        $dbhandler->runCommand("SELECT `ActiveWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$applicantsToSend[$m]['UserID']);
                        $result = $dbhandler->getResults();
                        $activeWorkRequests2 = $result[0]['ActiveWorkRequests'];
//                        $returnValue .= " \n Should be compared with".$applicantsToSend[$m]['UserID']."The following dates to be compared: ".$minDate->format("Y-m-d").":".$date2->format("Y-m-d")." And the following active requests :".$activeWorkRequests.":".$activeWorkRequests2;
                        if($date2 < $minDate || $activeWorkRequests2 < $activeWorkRequests){
//                            $returnValue = "It got here";
                            $minDate = $date2;
                            $activeWorkRequests = $activeWorkRequests2;
                            $leastIndex = $m;
                        }
                    }

                    array_push($returnValue,$applicantsToSend[$leastIndex]['UserID']);
                    unset($applicantsToSend[$leastIndex]);

                    $counter++;
                }
            }
        }
        else{
            //Currently no available tradeworkers in the area
            $returnValue *= -11;
        }
//        $returnValue = $applicantsToSend;
        return $returnValue;
    }

    public static function fetchLocationToAddress($areaID){
        $command = "Select * FROM `AREA_PER_LOCATION` WHERE `AreaID`=?";
        $dbhandler = self::fetchDatabaseHandler();
        $dbhandler->runCommand($command,$areaID);
        $result = $dbhandler->getResults();
        return $result[0]['locationID'];

    }

    public static function addTradeworkerToOngoingRequest($requestID){
        $command = "SELECT `workTypeID`,`Address`,`NumberOfWorkersRequested`,`NumberOfWorkersAccepted`,`JobCommencementDate` FROM `QUOTE_REQUEST` WHERE `RequestID`=?";
        $result = false;
        $dbhandler = self::fetchDatabaseHandler();
        $dbhandler->runCommand($command,$requestID);
        $requestDetails = $dbhandler->getResults();
        $date = $requestDetails[0]['JobCommencementDate'];
        $workType = $requestDetails[0]['workTypeID'];
        $locationID = self::fetchLocationToAddress($requestDetails[0]['Address']);
        $command = "SELECT * FROM `QUOTE` WHERE `RequestID`=?";
        $dbhandler->runCommand($command,$requestID);
        $quote = $dbhandler->getResults();
        $numRequestPerType = $requestDetails[0]['NumberOfWorkersRequested'] - $requestDetails[0]['NumberOfWorkersAccepted'];
        for($i = 0;$i < count($quote);$i++){
            if($quote[$i]['HomeuserResponse'] != 3 && $quote[$i]['Status'] != 3){
                if($quote[$i]['HomeuserResponse'] == 2 || $quote[$i]['Status'] == 2){
                    //Means that one of the users has rejected the request and so it should not be taken in to the count
                }
                else{
                    //Means that neither the homeuser or the tradeworker have rejected the request and the request has neither been completed
                    $numRequestPerType--;
                }
            }

        }

        if($numRequestPerType > 0){
            $tradeworkerID = self::fetchAvailableTradeworker($workType,intval($locationID),$numRequestPerType,$requestID);
            if(gettype($tradeworkerID) == "boolean"){
                //TODO:Tell the difference between unavailable users in an area and no users in the area with selected work type so that user can leave the request active for when a tradeworker becomes available the returned values will then be negative integer for errors and if it passes it will be a positive integer
                //Technically this should not occur anymore on failure negative integer value is sent
                $result = $tradeworkerID;
            }
            else if(gettype($tradeworkerID) == "integer") {
//                    Tradeworker could not be requested an error occured in the method fetchAvailableTradeworker
                $result = $tradeworkerID;
            }
            else if(gettype($tradeworkerID) == "array"){
                if(count($tradeworkerID) > 0){
                    for($r = 0;$r < count($tradeworkerID);$r++){
                        $command = "INSERT INTO `QUOTE` (`RequestID`,`RequestedUser`) VALUES (?,?)";
                        if ($dbhandler->runCommand($command, $requestID, $tradeworkerID[$r])) {
                            //The insert was successful send notification to tradeworker
                            if (self::addNotification($tradeworkerID[$r], "Added job request: check under manage jobs - job requests tab")) {
                                //TODO:Add one to the activeRequests as well as one to the overall requests to the TRADEWORKER table for the given tradeworker id,
                                $dbhandler->runCommand("SELECT `ActiveWorkRequests`,`OverallWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$tradeworkerID[$r]);
                                $amount = $dbhandler->getResults();
                                $command = "UPDATE `TRADE_WORKER` SET `ActiveWorkRequests` = ? , `OverallWorkRequests` = ? WHERE `UserID` = ?";
                                if ($dbhandler->runCommand($command,intval($amount[0]['ActiveWorkRequests'] + 1),intval($amount[0]['OverallWorkRequests'] + 1),$tradeworkerID[$r])) {
                                    $result = true;
                                    //This should be counting array of the result of the dbHandler
                                } else {
                                    $result = "Failed to increment tradeworker notifications";
                                }
                            } else {
                                $result = "Could not add notification";
                            }
                        } else {
                            //The quote request could not be inserted for some reason error check
                            $result = "Could not add quote" . $date;
                        }
                    }
                }
//                        $result = $tradeworkerID;
            }
        }
        return $result;
    }

    public static function homeuserRequestTradeworkerAndroid($input, $UserID){

//        $_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'])
        $dbhandler = self::fetchDatabaseHandler();
        $route = $input[2];
        $workType = 6;
        $area = $input[4];
        $subArea = $input[3];
        $streetNumber = $input[1];
        $province = $input[5];
        $date = $input[0];
        $numRequest = $input[8];
//        $date = DateTime::createFromFormat("Y-m-d",$input[0]);
        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `locationName` = ?";
        $dbhandler->runCommand($command,$area);
        $result = $dbhandler->getResults();
        $locationID = -1;

        if(count($result) > 0){
            $locationID = $result[0]['locationID'];
        }
        else{
            //TODO:The user needs to be informed that no tradeworker/contractor exists with that skill in the area currently
            //I think to make that if an area has no tradeworkers that the area cannot be added by the homeuser to be the best approach
            $result = 1;
            $result *= 2;
        }
        $addressID = -1;
        if($locationID > 0) {
            $command = "SELECT `AreaID` FROM `AREA_PER_LOCATION` WHERE `AreaName` = ? AND `StreetNumber` = ?";
            $dbhandler->runCommand($command, $subArea, $streetNumber);
            $result = $dbhandler->getResults();

            if (count($result) > 0) {
                $addressID = $result[0]['AreaID'];
            }
            else {
                //This one can occur it just means the street address and area need to be added to the database
                $command = "INSERT INTO `AREA_PER_LOCATION` (`StreetNumber`,`AreaName`,`locationID`,`Road`) VALUES (?,?,?,?)";
                if($dbhandler->runCommand($command, $streetNumber, $subArea, $locationID,$route)){
                    $addressID = $dbhandler->getInsertID();
                }
                else{
                    //area failed to insert for some reason check for errors
                    $result = 1;
                    $result *= 3;
                }

            }
        }

        $id = $UserID;

        //$result = $addressID." ".$locationID;
        //TODO: run for loop for all the different skill types requested as well as set up a quote per number requested per skill
        if($addressID > 0 && $locationID > 0 && $id){
            //The following will check if a tradeworker exists with the skills required so that a notification can be sent out immediately
            // outer for loop runs on ignore-actual-nTradeworkers-homeuser-rTradeworker while inner for loop will run on nTradeworkers-homeuser-rTradeworker-0
            $command = "INSERT INTO `QUOTE_REQUEST` (`UserID`,`NumberOfWorkersRequested`,`workTypeID`,`JobDescription`,`Address`,`JobCommencementDate`) VALUES (?,?,?,?,?,?)";

            for($z = 0; $z < $numRequest; $z++){
                $numRequestPerType = $_POST['nTradeworkers-homeuser-rTradeworker-'.$z];
                $workType = $_POST['homeuser-rTradeworker-work-type-'.$z];
                $jobDescription = $_POST['job-description-homeuser-rTradeworker-'.$z];
                if ($dbhandler->runCommand($command, $id, $numRequestPerType, $workType, $jobDescription, $addressID, $date)) {

                    $requestID = $dbhandler->getInsertID();
                    $tradeworkerID = self::fetchAvailableTradeworker($workType,$locationID,$numRequestPerType,$requestID);

                    if(gettype($tradeworkerID) == "boolean"){
                        //TODO:Tell the difference between unavailable users in an area and no users in the area with selected work type so that user can leave the request active for when a tradeworker becomes available the returned values will then be negative integer for errors and if it passes it will be a positive integer
                        //Technically this should not occur anymore on failure negative integer value is sent
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "integer") {
//                    Tradeworker could not be requested an error occured in the method fetchAvailableTradeworker
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "array"){
                        if(count($tradeworkerID) > 0){
                            for($r = 0;$r < count($tradeworkerID);$r++){
                                $command = "INSERT INTO `QUOTE` (`RequestID`,`RequestedUser`) VALUES (?,?)";
                                if ($dbhandler->runCommand($command, $requestID, $tradeworkerID[$r])) {
                                    //The insert was successful send notification to tradeworker
                                    if (self::addNotification($tradeworkerID[$r], "Added job request: check under manage jobs - job requests tab")) {
                                        //TODO:Add one to the activeRequests as well as one to the overall requests to the TRADEWORKER table for the given tradeworker id,
                                        $dbhandler->runCommand("SELECT `ActiveWorkRequests`,`OverallWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$tradeworkerID[$r]);
                                        $amount = $dbhandler->getResults();
                                        $command = "UPDATE `TRADE_WORKER` SET `ActiveWorkRequests` = ? , `OverallWorkRequests` = ? WHERE `UserID` = ?";
                                        if ($dbhandler->runCommand($command,intval($amount[0]['ActiveWorkRequests'] + 1),intval($amount[0]['OverallWorkRequests'] + 1),$tradeworkerID[$r])) {
                                            $result = true;
                                            //This should be counting array of the result of the dbHandler
                                        } else {
                                            $result = "Failed to increment tradeworker notifications";
                                        }
                                    } else {
                                        $result = "Could not add notification";
                                    }
                                } else {
                                    //The quote request could not be inserted for some reason error check
                                    $result = "Could not add quote" . $date;
                                }
                            }
                        }
//                        $result = $tradeworkerID;
                    }
                    else{
                        //The following should never occur the return type should be of Integer or boolean or array only

                        $result = $tradeworkerID;
                    }
                }
                else{
                    //Failed to add request to database
                }
            }
        }

        return $result;
    }

    public static function homeuserRequestTradeworker($input){

//        $_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'])
        $dbhandler = self::fetchDatabaseHandler();
        $route = $input[2];
        $workType = 6;
        $area = $input[4];
        $subArea = $input[3];
        $streetNumber = $input[1];
        $province = $input[5];
        $date = $input[0];
        $numRequest = $input[8];
//        $date = DateTime::createFromFormat("Y-m-d",$input[0]);
        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `locationName` = ?";
        $dbhandler->runCommand($command,$area);
        $result = $dbhandler->getResults();
        $locationID = -1;

        if(count($result) > 0){
            $locationID = $result[0]['locationID'];
        }
        else{
            //TODO:The user needs to be informed that no tradeworker/contractor exists with that skill in the area currently
            //I think to make that if an area has no tradeworkers that the area cannot be added by the homeuser to be the best approach
            $result = 1;
            $result *= 2;
        }
        $addressID = -1;
        if($locationID > 0) {
            $command = "SELECT `AreaID` FROM `AREA_PER_LOCATION` WHERE `AreaName` = ? AND `StreetNumber` = ?";
            $dbhandler->runCommand($command, $subArea, $streetNumber);
            $result = $dbhandler->getResults();

            if (count($result) > 0) {
                $addressID = $result[0]['AreaID'];
            }
            else {
                //This one can occur it just means the street address and area need to be added to the database
                $command = "INSERT INTO `AREA_PER_LOCATION` (`StreetNumber`,`AreaName`,`locationID`,`Road`) VALUES (?,?,?,?)";
                if($dbhandler->runCommand($command, $streetNumber, $subArea, $locationID,$route)){
                    $addressID = $dbhandler->getInsertID();
                }
                else{
                    //area failed to insert for some reason check for errors
                    $result = 1;
                    $result *= 3;
                }

            }
        }

        $session = self::fetchSessionHandler();
        $id = $session->getSessionVariable('UserID');

        //$result = $addressID." ".$locationID;
        //TODO: run for loop for all the different skill types requested as well as set up a quote per number requested per skill
        if($addressID > 0 && $locationID > 0 && $id){
            //The following will check if a tradeworker exists with the skills required so that a notification can be sent out immediately
            // outer for loop runs on ignore-actual-nTradeworkers-homeuser-rTradeworker while inner for loop will run on nTradeworkers-homeuser-rTradeworker-0
            $command = "INSERT INTO `QUOTE_REQUEST` (`UserID`,`NumberOfWorkersRequested`,`workTypeID`,`JobDescription`,`Address`,`JobCommencementDate`) VALUES (?,?,?,?,?,?)";

            for($z = 0; $z < $numRequest; $z++){
                $numRequestPerType = $_POST['nTradeworkers-homeuser-rTradeworker-'.$z];
                $workType = $_POST['homeuser-rTradeworker-work-type-'.$z];
                $jobDescription = $_POST['job-description-homeuser-rTradeworker-'.$z];
                if ($dbhandler->runCommand($command, $id, $numRequestPerType, $workType, $jobDescription, $addressID, $date)) {

                    $requestID = $dbhandler->getInsertID();
                    $tradeworkerID = self::fetchAvailableTradeworker($workType,$locationID,$numRequestPerType,$requestID);

                    if(gettype($tradeworkerID) == "boolean"){
                        //TODO:Tell the difference between unavailable users in an area and no users in the area with selected work type so that user can leave the request active for when a tradeworker becomes available the returned values will then be negative integer for errors and if it passes it will be a positive integer
                        //Technically this should not occur anymore on failure negative integer value is sent
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "integer") {
//                    Tradeworker could not be requested an error occured in the method fetchAvailableTradeworker
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "array"){
                        if(count($tradeworkerID) > 0){
                            for($r = 0;$r < count($tradeworkerID);$r++){
                                $command = "INSERT INTO `QUOTE` (`RequestID`,`RequestedUser`) VALUES (?,?)";
                                if ($dbhandler->runCommand($command, $requestID, $tradeworkerID[$r])) {
                                    //The insert was successful send notification to tradeworker
                                    if (self::addNotification($tradeworkerID[$r], "Added job request: check under manage jobs - job requests tab")) {
                                        //TODO:Add one to the activeRequests as well as one to the overall requests to the TRADEWORKER table for the given tradeworker id,
                                        $dbhandler->runCommand("SELECT `ActiveWorkRequests`,`OverallWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$tradeworkerID[$r]);
                                        $amount = $dbhandler->getResults();
                                        $command = "UPDATE `TRADE_WORKER` SET `ActiveWorkRequests` = ? , `OverallWorkRequests` = ? WHERE `UserID` = ?";
                                        if ($dbhandler->runCommand($command,intval($amount[0]['ActiveWorkRequests'] + 1),intval($amount[0]['OverallWorkRequests'] + 1),$tradeworkerID[$r])) {
                                            $result = true;
                                            //This should be counting array of the result of the dbHandler
                                        } else {
                                            $result = "Failed to increment tradeworker notifications";
                                        }
                                    } else {
                                        $result = "Could not add notification";
                                    }
                                } else {
                                    //The quote request could not be inserted for some reason error check
                                    $result = "Could not add quote" . $date;
                                }
                            }
                        }
//                        $result = $tradeworkerID;
                    }
                    else{
                        //The following should never occur the return type should be of Integer or boolean or array only

                        $result = $tradeworkerID;
                    }
                }
                else{
                    //Failed to add request to database
                }
            }
        }

        return $result;
    }

    public static function contractorRequestTradeworker($input){

        $dbhandler = self::fetchDatabaseHandler();
        $route = $input[2];
        $workType = 6;
        $area = $input[4];
        $subArea = $input[3];
        $streetNumber = $input[1];
        $province = $input[5];
        $date = $input[0];
        $numRequest = $input[8];
//        $date = DateTime::createFromFormat("Y-m-d",$input[0]);
        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `locationName` = ?";
        $dbhandler->runCommand($command,$area);
        $result = $dbhandler->getResults();
        $locationID = -1;

        if(count($result) > 0){
            $locationID = $result[0]['locationID'];
        }
        else{
            //TODO:The user needs to be informed that no tradeworker/contractor exists with that skill in the area currently
            //I think to make that if an area has no tradeworkers that the area cannot be added by the homeuser to be the best approach
            $result = 1;
            $result *= 2;
        }
        $addressID = -1;
        if($locationID > 0) {
            $command = "SELECT `AreaID` FROM `AREA_PER_LOCATION` WHERE `AreaName` = ? AND `StreetNumber` = ?";
            $dbhandler->runCommand($command, $subArea, $streetNumber);
            $result = $dbhandler->getResults();

            if (count($result) > 0) {
                $addressID = $result[0]['AreaID'];
            }
            else {
                //This one can occur it just means the street address and area need to be added to the database
                $command = "INSERT INTO `AREA_PER_LOCATION` (`StreetNumber`,`AreaName`,`locationID`,`Road`) VALUES (?,?,?,?)";
                if($dbhandler->runCommand($command, $streetNumber, $subArea, $locationID,$route)){
                    $addressID = $dbhandler->getInsertID();
                }
                else{
                    //area failed to insert for some reason check for errors
                    $result = 1;
                    $result *= 3;
                }

            }
        }

        $session = self::fetchSessionHandler();
        $id = $session->getSessionVariable('UserID');

        if($addressID > 0 && $locationID > 0 && $id) {
            for ($z = 0; $z < $numRequest; $z++) {
                $numRequestPerType = $_POST['nTradeworkers-contractor-rTradeworker-'.$z];
                $workType = $_POST['contractor-rTradeworker-work-type-'.$z];
                $jobDescription = $_POST['job-description-contractor-rTradeworker-'.$z];

                if ($dbhandler->runCommand($command, $id, $numRequestPerType, $workType, $jobDescription, $addressID, $date)) {

                    $requestID = $dbhandler->getInsertID();
                    $tradeworkerID = self::fetchAvailableTradeworker($workType,$locationID,$numRequestPerType,$requestID);

                    if(gettype($tradeworkerID) == "boolean"){
                        //TODO:Tell the difference between unavailable users in an area and no users in the area with selected work type so that user can leave the request active for when a tradeworker becomes available the returned values will then be negative integer for errors and if it passes it will be a positive integer
                        //Technically this should not occur anymore on failure negative integer value is sent
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "integer") {
//                    Tradeworker could not be requested an error occured in the method fetchAvailableTradeworker
                        $result = $tradeworkerID;
                    }
                    else if(gettype($tradeworkerID) == "array"){
                        if(count($tradeworkerID) > 0){
                            for($r = 0;$r < count($tradeworkerID);$r++){
                                $command = "INSERT INTO `QUOTE` (`RequestID`,`RequestedUser`) VALUES (?,?)";
                                if ($dbhandler->runCommand($command, $requestID, $tradeworkerID[$r])) {
                                    //The insert was successful send notification to tradeworker
                                    if (self::addNotification($tradeworkerID[$r], "Added job request: check under manage jobs - job requests tab")) {
                                        //TODO:Add one to the activeRequests as well as one to the overall requests to the TRADEWORKER table for the given tradeworker id,
                                        $dbhandler->runCommand("SELECT `ActiveWorkRequests`,`OverallWorkRequests` FROM `TRADE_WORKER` WHERE `UserID` = ?",$tradeworkerID[$r]);
                                        $amount = $dbhandler->getResults();
                                        $command = "UPDATE `TRADE_WORKER` SET `ActiveWorkRequests` = ? , `OverallWorkRequests` = ? WHERE `UserID` = ?";
                                        if ($dbhandler->runCommand($command,intval($amount[0]['ActiveWorkRequests'] + 1),intval($amount[0]['OverallWorkRequests'] + 1),$tradeworkerID[$r])) {
                                            $result = true;
                                            //This should be counting array of the result of the dbHandler
                                        } else {
                                            $result = "Failed to increment tradeworker notifications";
                                        }
                                    } else {
                                        $result = "Could not add notification";
                                    }
                                } else {
                                    //The quote request could not be inserted for some reason error check
                                    $result = "Could not add quote" . $date;
                                }
                            }
                        }

                    }
                    else{
                        //The following should never occur the return type should be of Integer or boolean or array only

                        $result = false;
                    }
                }
                else{
                    //Failed to add request to database
                }
            }
        }
    }

    public static function fetchAreasPerLocationDetails($addressID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `StreetNumber`,`AreaName`,`locationID`,`Road` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
        $dbhandler->runCommand($command,$addressID);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return false;
        }
    }

    public static function fetchLocationDetails($locationID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `locationName`,`Province`,`City` FROM `LOCATIONS` WHERE `locationID` = ?";
        $dbhandler->runCommand($command,$locationID);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return false;
        }
    }

    public static function fetchUserDetails($userID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `REGISTERED_USER` WHERE `UserID` = ?";
        $dbhandler->runCommand($command,$userID);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return null;
        }
    }

    public static function fetchQuotes($requestID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `QuoteID`,`RequestedUser`,`Status`,`HomeuserResponse` FROM `QUOTE` WHERE `RequestID` = ? AND `Status` != ? AND `Status` != ?";
        $dbhandler->runCommand($command,$requestID,2,0);
        $results = $dbhandler->getResults();

        if(count($results)> 0){
            return $results;
        }
        else{
            return null;
        }
    }

    public static function fetchTradeworkerJobRequests($userID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `QuoteID`,`RequestID`,`Status`,`HomeuserResponse` FROM `QUOTE` WHERE `RequestedUser` = ?";
        $dbhandler->runCommand($command,$userID);
        $result = $dbhandler->getResults();
        $returnValue = [];
        if(count($result)){
            for($r = 0;$r < count($result);$r++){
                $command = "SELECT `workTypeID`,`JobDescription`,`Address`,`JobCommencementDate` FROM `QUOTE_REQUEST` WHERE `RequestID` = ?";
                $dbhandler->runCommand($command,$result[$r]['RequestID']);
                $fullRequest = $dbhandler->getResults();
                if($result[$r]['HomeuserResponse'] == 1 || $result[$r]['HomeuserResponse'] == 3){
                    $command = "SELECT `UserID` FROM `QUOTE_REQUEST` WHERE `RequestID` = ?";
                    $dbhandler->runCommand($command,$result[$r]['RequestID']);
                    $homeuserID = $dbhandler->getResults();
                    $command = "SELECT `Name`,`Surname`,`ContactNumber` FROM `REGISTERED_USER` WHERE `UserID` = ?";
                    $dbhandler->runCommand($command,$homeuserID[0]['UserID']);
                    $homeuserDetails = $dbhandler->getResults();
                    $returnValue[$r]["HomeuserName"] = $homeuserDetails[0]['Name'];
                    $returnValue[$r]["HomeuserSurname"] = $homeuserDetails[0]['Surname'];
                    $returnValue[$r]["HomeuserContact"] = $homeuserDetails[0]['ContactNumber'];
                    $command = "SELECT `StreetNumber`,`Road`,`AreaName`,`locationID` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
                }
                else{
                    $command = "SELECT `AreaName`,`locationID` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
                }
                $dbhandler->runCommand($command,$fullRequest[0]['Address']);
                $areaInfo = $dbhandler->getResults();
                if($result[$r]['HomeuserResponse'] == 3){
                    $command = "SELECT `Notifier`,`TradeworkerRequest`,`JobID`,`JobProceedDate`,`AgreedPrice`,`EstimatedCompletionDate`,`Status` FROM `JOB_PER_USER` WHERE `QuoteID` = ?";
                    $dbhandler->runCommand($command,$result[$r]['QuoteID']);
                    $jobResults = $dbhandler->getResults();
                    $returnValue[$r]["JobProceedDate"] = $jobResults[0]['JobProceedDate'];
                    $returnValue[$r]["AgreedPrice"] = $jobResults[0]['AgreedPrice'];
                    $returnValue[$r]["EstimatedCompletionDate"] = $jobResults[0]['EstimatedCompletionDate'];
                    $returnValue[$r]["JobStatus"] = $jobResults[0]['Status'];
                    $returnValue[$r]["JobID"] = $jobResults[0]['JobID'];
                    $returnValue[$r]["TradeworkerReq"] = $jobResults[0]['TradeworkerRequest'];
                    $returnValue[$r]["Notifier"] = $jobResults[0]['Notifier'];
                    if($jobResults[0]['Status'] == 1){
                        $command = "SELECT `PictureID`,`JobID`,`UserID`,`PictureName`,`ToPrint`,`HomeuserAccepted`,`TradeworkerAccepted` FROM `PICTURES_PER_JOB` WHERE `JobID` = ?";
                        $dbhandler->runCommand($command,$jobResults[0]['JobID']);
                        $picturesResult = $dbhandler->getResults();
                        if(count($picturesResult) > 0){
                            $returnValue[$r]['JobID-'.$jobResults[0]['JobID'].'-'."PictureCount"] = count($picturesResult);
                            for($q = 0;$q < count($picturesResult);$q++){
                                $returnValue[$r]['JobID-'.$jobResults[0]['JobID'].'-'."PictureID-".$q] = $picturesResult[$q]['PictureID'].'_'.$picturesResult[$q]['JobID'].'_'.$picturesResult[$q]['UserID'].'_'.$picturesResult[$q]['PictureName'];
                                $returnValue[$r]['JobID-'.$jobResults[0]['JobID'].'-'."PictureID-".$q.'ToPrint'] = $picturesResult[$q]['ToPrint'];
                                $returnValue[$r]['JobID-'.$jobResults[0]['JobID'].'-'."PictureID-".$q.'HomeuserAcceptedPic'] = $picturesResult[$q]['HomeuserAccepted'];
                                $returnValue[$r]['JobID-'.$jobResults[0]['JobID'].'-'."PictureID-".$q.'TradeworkerAcceptedPic'] = $picturesResult[$q]['TradeworkerAccepted'];
                            }

                        }
                    }
                }
                $workType = self::returnWorkTypes($fullRequest[0]['workTypeID']);
                $command = "SELECT `locationName`,`Province`,`City` FROM `LOCATIONS` WHERE `locationID` = ?";
                $dbhandler->runCommand($command,$areaInfo[0]['locationID']);
                $locationInfo = $dbhandler->getResults();
                $returnValue[$r]["QuoteID"] = $result[$r]['QuoteID'];
                $returnValue[$r]["Status"] = $result[$r]['Status'];
                $returnValue[$r]["HomeuserResponse"] = $result[$r]['HomeuserResponse'];
                $returnValue[$r]["JobDescription"] = $fullRequest[0]['JobDescription'];
                $returnValue[$r]["JobCommencementDate"] = $fullRequest[0]['JobCommencementDate'];
                $returnValue[$r]["AreaName"] = $areaInfo[0]['AreaName'];
                $returnValue[$r]["locationName"] = $locationInfo[0]['locationName'];
                $returnValue[$r]["Province"] = $locationInfo[0]['Province'];
                $returnValue[$r]["City"] = $locationInfo[0]['City'];
                if($result[$r]['HomeuserResponse'] == 3 ||$result[$r]['HomeuserResponse'] == 1){
                    $returnValue[$r]["StreetNumber"] = $areaInfo[0]['StreetNumber'];
                    $returnValue[$r]["Road"] = $areaInfo[0]['Road'];
                }
                $returnValue[$r]["WorkType"] = $workType[0]['WorkType'];
                $returnValue[$r]["WorkTypeID"] = $fullRequest[0]['workTypeID'];
//                array_push($returnValue,$result[$r]['QuoteID'],$result[$r]['Status'],$fullRequest[0]['AreaName'],$fullRequest[0]['JobDescription'],$fullRequest[0]['JobCommencementDate'],$areaInfo[0]['AreaName'],$locationInfo[0]['locationName'],$locationInfo[0]['Province'],$workType[0]['WorkType']);

            }
        }
        else{
            $returnValue = false;
        }

        return $returnValue;
    }

    public static function fetchHomeuserInitiatedJobs($quoteID){

        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `JOB_PER_USER` WHERE `QuoteID` = ?";
        $dbhandler->runCommand($command,$quoteID);
        $result = $dbhandler->getResults();
        if(count($result) > 0){
            $returnValue = $result;
        }
        else{
            $returnValue = null;
        }

        return $returnValue;
    }

    public static function fetchHomeuserJobRequests($userID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `RequestID`,`workTypeID`,`JobDescription`,`Address`,`DateInitialised`,`JobCommencementDate`,`NumberOfWorkersRequested`,`NumberOfWorkersAccepted`,`Status` FROM `QUOTE_REQUEST` WHERE `UserID` = ?";
        $dbhandler->runCommand($command,$userID);
        $result = $dbhandler->getResults();
        $worktypes = self::returnWorkTypes();
        //TODO: refactor with Quote table NB!!!! - just return a count of the number of request in quote sent out per quote_request
        //TODO:Retrieve according to address get the
        //If results contains information then the fetching of areas and locations should be able to occur, because the address column is directly related to AREAS_PER_LOCATION which is also related to LOCATIONS
        if(count($result) > 0 && count($worktypes) > 0) {

            for ($i = 0; $i < count($result); $i++) {
                $areas = self::fetchAreasPerLocationDetails($result[$i]['Address']);
                $locations = self::fetchLocationDetails($areas[0]['locationID']);
                $workType = self::returnWorkTypes($result[$i]['workTypeID']);
                $quotes = self::fetchQuotes($result[$i]['RequestID']);
                if(count($quotes) > 0){
                    for($r =0; $r < count($quotes); $r++){
                        $jobsInitiated = self::fetchHomeuserInitiatedJobs($quotes[$r]['QuoteID']);
                        if($jobsInitiated != null){
                            $returnValue[$i]['JobID-'.$r] = $jobsInitiated[0]['JobID'];
                            $returnValue[$i]['JobProceedDate-'.$r] = $jobsInitiated[0]['JobProceedDate'];
                            $returnValue[$i]['AgreedPrice-'.$r] = $jobsInitiated[0]['AgreedPrice'];
                            $returnValue[$i]['EstimatedCompletionDate-'.$r] = $jobsInitiated[0]['EstimatedCompletionDate'];
                            $returnValue[$i]['JobStatus-'.$r] = $jobsInitiated[0]['Status'];
                            $returnValue[$i]["Notifier-".$r] = $jobsInitiated[0]['Notifier'];
                            $returnValue[$i]["TradeworkerReq-".$r] = $jobsInitiated[0]['TradeworkerRequest'];
                            //$command = "SELECT `PictureID`,`JobID`,`UserID`,`PictureName`,`ToPrint`,`HomeuserAccepted`,`TradeworkerAccepted` FROM `PICTURES_PER_JOB` WHERE `JobID` = ?";
//                            $dbhandler->runCommand($command,$jobsInitiated[0]['JobID']);
//                            $picturesResult = $dbhandler->getResults();
//                            $returnValue[$i]['JobID-'.$r.'-'."PictureCount"] = count($picturesResult);
                            if($jobsInitiated[0]['Status'] == 2){
                                $command = "SELECT `UserTerminated`,`Reason`,`DateTerminated` FROM `REASON_FOR_JOB_TERMINATION` WHERE `JobID` = ?";
                                $dbhandler->runCommand($command,$jobsInitiated[0]['JobID']);
                                $terminatedJobResults = $dbhandler->getResults();
                                if($terminatedJobResults[0]["UserTerminated"] == $userID)
                                    $returnValue[$i]["UserTerminated-".$r] = "You terminated";
                                else
                                    $returnValue[$i]["UserTerminated-".$r] = "Tradeworker terminated";

                                $returnValue[$i]["ReasonFor-".$r] = $terminatedJobResults[0]["Reason"];
                                $returnValue[$i]["DateTerminated-".$r] = $terminatedJobResults[0]["DateTerminated"];
                            }
                            if($jobsInitiated[0]['Status'] == 1){
                                $command = "SELECT `PictureID`,`JobID`,`UserID`,`PictureName`,`ToPrint`,`HomeuserAccepted`,`TradeworkerAccepted` FROM `PICTURES_PER_JOB` WHERE `JobID` = ?";
                                $dbhandler->runCommand($command,$jobsInitiated[0]['JobID']);
                                $picturesResult = $dbhandler->getResults();
                                $returnValue[$i]['JobID-'.$r.'-'."PictureCount"] = count($picturesResult);
                                if(count($picturesResult) > 0){
                                    //$returnValue[$r]['JobID-'.$r.'-'."PictureCount"] = count($picturesResult);
                                    for($q = 0;$q < count($picturesResult);$q++){
                                        $returnValue[$i]['JobID-'.$r.'-'."PictureID-".$q] = $picturesResult[$q]['PictureID'].'_'.$picturesResult[$q]['JobID'].'_'.$picturesResult[$q]['UserID'].'_'.$picturesResult[$q]['PictureName'];
                                        $returnValue[$i]['JobID-'.$r.'-'."PictureID-".$q.'-TradeworkerAcceptedPic'] = $picturesResult[$q]['TradeworkerAccepted'];
                                        $returnValue[$i]['JobID-'.$r.'-'."PictureID-".$q.'-HomeuserAcceptedPic'] = $picturesResult[$q]['HomeuserAccepted'];
                                    }

                                }
                                //TODO: add the review when it is bad or good, if it is bad display what the homeuser said was bad - don't know if it should be displayed in detail to the tradeworker though
                                $command = "SELECT `ReviewID`,`JobSatisfaction`,`TradeworkerSatisfaction` FROM `REVIEW_PER_JOB` WHERE `JobID` = ?";
                                $dbhandler->runCommand($command,$jobsInitiated[0]['JobID']);
                                $reviewResults = $dbhandler->getResults();
                                if($reviewResults[0]['JobSatisfaction'] == 2){
                                    $returnValue[$i]['JobID-'.$r.'-'.'JobSatisfaction'] = "Unsatisfied";
                                    $command = "SELECT `Explanation` FROM `REASON_FOR_DISSATISFACTION` WHERE `ReviewID` = ? AND `Selection` = ?";
                                    $dbhandler->runCommand($command,$reviewResults[0]['ReviewID'],0);
                                    $reason = $dbhandler->getResults();
                                    $returnValue[$i]['JobID-'.$r.'-'.'JobSatisfactionReason'] = $reason[0]['Explanation'];
                                }
                                else{
                                    $returnValue[$i]['JobID-'.$r.'-'.'JobSatisfaction'] = "Satisfied";
                                }
                                if($reviewResults[0]['TradeworkerSatisfaction'] == 2){
                                    $returnValue[$i]['JobID-'.$r.'-'.'TradeworkerSatisfaction'] = "Unsatisfied";
                                    $command = "SELECT `Explanation` FROM `REASON_FOR_DISSATISFACTION` WHERE `ReviewID` = ? AND `Selection` = ?";
                                    $dbhandler->runCommand($command,$reviewResults[0]['ReviewID'],1);
                                    $reason = $dbhandler->getResults();
                                    $returnValue[$i]['JobID-'.$r.'-'.'TradeworkerSatisfactionReason'] = $reason[0]['Explanation'];
                                }
                                else{
                                    $returnValue[$i]['JobID-'.$r.'-'.'TradeworkerSatisfaction'] = "Satisfied";
                                }
                            }
                        }
                        $returnValue[$i]['QuoteID-'.$r] = $quotes[$r]['QuoteID'];
                        $returnValue[$i]['RequestedUser-'.$r] = $quotes[$r]['RequestedUser'];
                        $userInformation = self::fetchUserDetails($quotes[$r]['RequestedUser']);
                        $returnValue[$i]['Name-'.$r] = $userInformation[0]['Name'];
                        $returnValue[$i]['Surname-'.$r] = $userInformation[0]['Surname'];
                        $returnValue[$i]['ContactNumber-'.$r] = $userInformation[0]['ContactNumber'];
                        $returnValue[$i]['Status-'.$r] = $quotes[$r]['Status'];
                        $returnValue[$i]['HomeuserResponse-'.$r] = $quotes[$r]['HomeuserResponse'];
                    }
                }
                    $returnValue[$i]['RequestStatus'] = $result[$i]['Status'];
                    $returnValue[$i]['RequestID'] = $result[$i]['RequestID'];
                    $returnValue[$i]['workTypeID'] = $result[$i]['workTypeID'];
                    $returnValue[$i]['NumberOfWorkersRequested'] = $result[$i]['NumberOfWorkersRequested'];
                    $returnValue[$i]['NumberOfWorkersAccepted'] = $result[$i]['NumberOfWorkersAccepted'];
                    $returnValue[$i]['WorkType'] = $workType[0]['WorkType'];
                    $returnValue[$i]['JobDescription'] = $result[$i]['JobDescription'];
                    $returnValue[$i]['Address'] = $result[$i]['Address'];
                    $returnValue[$i]['DateInitialised'] = $result[$i]['DateInitialised'];
                    $returnValue[$i]['JobCommencementDate'] = $result[$i]['JobCommencementDate'];
                    $returnValue[$i]['StreetNumber'] = $areas[0]['StreetNumber'];
                    $returnValue[$i]['Road'] = $areas[0]['Road'];
                    $returnValue[$i]['AreaName'] = $areas[0]['AreaName'];
                    $returnValue[$i]['locationName'] = $locations[0]['locationName'];
                    $returnValue[$i]['Province'] = $locations[0]['Province'];



            }
            return $returnValue;
        }
        else
            return "It failed";
    }

    public static function fetchUserType(){
        $sessionHandler = self::fetchSessionHandler();
        $result = $sessionHandler->getSessionVariable("UserType");
        if($result <= 3)
            return $result;
        else
            return -1;

    }

    public static function rejectRequest($requestID){
        $userType = self::fetchUserType();
        $dbhandler = self::fetchDatabaseHandler();
        $sessionHandler = self::fetchSessionHandler();
        $userID = $sessionHandler->getSessionVariable("UserID");
        if($userType != -1){
            switch($userType){
                case 0:
                    $command = "UPDATE `QUOTE` SET `Status` = ? WHERE `QuoteID` = ? AND `RequestedUser` = ?";
                    //Status = 2 means the request has been rejected
                    if($dbhandler->runCommand($command,2,$requestID,$userID)){
                        $command = "SELECT `RequestID` FROM `QUOTE` WHERE `QuoteID`=?";
                        $dbhandler->runCommand($command,$requestID);
                        $rID = $dbhandler->getResults();
                        $result = self::addTradeworkerToOngoingRequest(intval($rID[0]['RequestID']));
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 1:
                    return 'Dealing with contractor accept request';
                    break;
                case 2:
                    $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `QuoteID` = ?";
                    //Status = 2 means the request has been rejected
                    if($dbhandler->runCommand($command,2,$requestID)){
                        $command = "SELECT `RequestID` FROM `QUOTE` WHERE `QuoteID`=?";
                        $dbhandler->runCommand($command,$requestID);
                        $rID = $dbhandler->getResults();
                        $result = self::addTradeworkerToOngoingRequest(intval($rID[0]['RequestID']));
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 3:
                    return 'Should be dealing with admin';
                    break;
                default:
                    return 'unrecognized usertype';
                    break;
            }
        }
        else{
            return false;
        }
    }

    //$quoteID is the value of the QuoteID found under the QUOTE table, this will go about incrementing the accepted number
    //of users by one
    public static function incrementNumberOfWorkersAccepted($quoteID): boolean{
        $returnValue = false;
        if($quoteID != null){
            $dbhandler = self::fetchDatabaseHandler();
            $command = "SELECT `RequestID` FROM `QUOTE` WHERE `QuoteID` = ?";
            $dbhandler->runCommand($command,$quoteID);
            $id = $dbhandler->getResults();
            if(count($id) > 0){
                $command = "SELECT `NumberOfWorkersRequested` FROM `QUOTE_REQUEST` WHERE `RequestID` = ?";
                $dbhandler->runCommand($command,$id[0]['RequestID']);
                $amount = $dbhandler->getResults();
                if(count($amount) > 0){
                    $command = "UPDATE `QUOTE_REQUEST` SET `NumberOfWorkersRequested` = ? WHERE `RequestID` = ?";
                    $returnValue = $dbhandler->runCommand($command,intval($amount[0]['NumberOfWorkersRequested']) + 1,$id[0]['RequestID']);
                }
            }


        }
        return $returnValue;
    }

    public static function fetchWorkingLocationDetails(){
        //TODO: This will get more complicated and return things like the number of jobs completed in an area etc...
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `locationID`,`locationName`,`Province` FROM `LOCATIONS`";
        $dbhandler->runCommand($command);
        $result = $dbhandler->getResults();
        $returnValue = null;
        $availableCount = 0;

        $added = false;
        if(count($result) > 0){
            $command = "SELECT * FROM `LOCATIONS_PER_USER` WHERE `locationID` = ?";
            for($i = 0; $i < count($result); $i++){
                $availableCount = 0;
                $specializationsGathered = [];
                $userIDGather = [];
                $dbhandler->runCommand($command,$result[$i]['locationID']);
                $locationsPerUser = $dbhandler->getResults();
                $returnValue[$i]['locality'] = $result[$i]['locationName'];
                $returnValue[$i]['province'] = $result[$i]['Province'];
                $returnValue[$i]['numWorkers'] = count($locationsPerUser);
                for($t = 0;$t < count($locationsPerUser) && !$added ;$t++){
                    for($s = 0;$s < count($userIDGather);$s++){
                        if($locationsPerUser[$t]['UserID'] == $userIDGather[$s]){
                            $added = true;
                        }
                    }
                    if(!$added){
                        array_push($userIDGather,$locationsPerUser[$t]['UserID']);
                    }
                    $added = false;

                }
                $command2 = "SELECT * FROM `TRADE_WORKER` WHERE `Availability`=?";
                $dbhandler->runCommand($command2,1);
                $users = $dbhandler->getResults();
                    for($e = 0;$e < count($userIDGather);$e++){
                        for($r= 0;$r < count($users);$r++){
                            if($userIDGather[$e] == $users[$r]['UserID']){
                                $availableCount++;
                            }
                        }
                        $command3 = "SELECT * FROM `SPECIALIZATIONS_PER_USER` WHERE `UserID` = ?";
                        $dbhandler->runCommand($command3,$userIDGather[$e]);
                        $specializationsPerUser = $dbhandler->getResults();
                        $specializations = self::adminFetchSpecializations();
                        for($l = 0;$l < count($specializationsPerUser);$l++){

                            for($x = 0;$x < count($specializations);$x++){
                                if($specializationsPerUser[$l]['workTypeID'] == $specializations[$x]['workTypeID']){
                                    $gathered = false;
                                    for($v = 0;$v < count($specializationsGathered);$v++){
                                        if($specializationsGathered[$v] == $specializations[$x]['WorkType']){
                                            $gathered = true;
                                        }
                                    }
                                    if(!$gathered){
                                        array_push($specializationsGathered,$specializations[$x]['WorkType']);
                                    }
                                }
                            }
                        }
                    }
                $returnValue[$i]['AvailableWorkers'] = $availableCount;
                $returnValue[$i]['DifferentWorksCovered'] = $specializationsGathered;
                }


            return $returnValue;
        }
        else
            return $returnValue;
    }

    public static function acceptRequest($requestID){
        $userType = self::fetchUserType();
        $dbhandler = self::fetchDatabaseHandler();
        $sessionHandler = self::fetchSessionHandler();
        $userID = $sessionHandler->getSessionVariable("UserID");
        if($userType != -1){
            switch($userType){
                case 0:
                    $command = "UPDATE `QUOTE` SET `Status` = ? WHERE `QuoteID` = ? AND `RequestedUser` = ?";
                    //Status = 1 means the request has been accepted
                    if($dbhandler->runCommand($command,1,$requestID,$userID)){
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 1:
                    return 'Dealing with contractor accept request';
                    break;
                case 2:
                    //Dealing with homeuser accept request
                    $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `QuoteID` = ?";
                    //Status = 1 means the request has been accepted
                    if($dbhandler->runCommand($command,1,$requestID)){
                        //Consider incrementing number of workers accepted here or do it perhaps after a job has been initiated between yourself and the tradeworker
//                        self::incrementNumberOfWorkersAccepted($requestID);
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 3:
                    return 'Should be dealing with admin';
                    break;
                default:
                    return 'unrecognized usertype';
                    break;
            }
        }
        else{
            return "This should have worked ".$userType;
        }
    }

    public static function acceptRequestAndroid($requestID, $userID, $userType){
        $dbhandler = self::fetchDatabaseHandler();
        if($userType != -1){
            switch($userType){
                case 0:
                    $command = "UPDATE `QUOTE` SET `Status` = ? WHERE `QuoteID` = ? AND `RequestedUser` = ?";
                    //Status = 1 means the request has been accepted
                    if($dbhandler->runCommand($command,1,$requestID,$userID)){
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 1:
                    return 'Dealing with contractor accept request';
                    break;
                case 2:
                    //Dealing with homeuser accept request
                    $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `QuoteID` = ?";
                    //Status = 1 means the request has been accepted
                    if($dbhandler->runCommand($command,1,$requestID)){
                        //Consider incrementing number of workers accepted here or do it perhaps after a job has been initiated between yourself and the tradeworker
//                        self::incrementNumberOfWorkersAccepted($requestID);
                        return true;
                    }
                    else{
                        return false;
                    }
                    break;
                case 3:
                    return 'Should be dealing with admin';
                    break;
                default:
                    return 'unrecognized usertype';
                    break;
            }
        }
        else{
            return "This should have worked ".$userType;
        }
    }

    public static function isUnique($value,$condition,$type){
        switch($type){
            case "registered_users":
                $dbhandler = self::fetchDatabaseHandler();
                $command = "SELECT * FROM `REGISTERED_USER` WHERE `".$condition."` = ?";
                $dbhandler->runCommand($command,$value);
                $results = $dbhandler->getResults();

                if(count($results) > 0){
                    return false;
                }
                else{
                    return true;
                }
                break;
            case "contractor":
                $dbhandler = self::fetchDatabaseHandler();
                $command = "SELECT * FROM `CONTRACTOR` WHERE `".$condition."` = ?";
                $dbhandler->runCommand($command,$value);
                $results = $dbhandler->getResults();

                if(count($results) > 0){
                    return false;
                }
                else{
                    return true;
                }
                break;
            default:
                return false;
                break;
        }

    }

    public static function tradeworkerFetchRequests(){
        $userID = self::fetchUserID();
        $dbhandler = self::fetchDatabaseHandler();
        $returnValue = false;
        $command = "SELECT `QuoteID`,`RequestID` FROM `QUOTE` WHERE `RequestedUser` = ? AND `HomeuserResponse` = ? AND `Status` = ?";
        $dbhandler->runCommand($command,$userID,1,1);
        $result = $dbhandler->getResults();
        if(count($result) > 0){
            //There will be notifications to send to the tradeworker where the user has confirmed his acceptance of the
            //request - gather relevant information to send to be displayed as a modal notification
            for($j = 0; $j < count($result); $j++){
                $command = "SELECT `UserID`,`workTypeID`,`JobDescription`,`Address`,`JobCommencementDate` FROM `QUOTE_REQUEST` WHERE `RequestID` = ?";
                $dbhandler->runCommand($command,$result[$j]['RequestID']);
                $requestResults = $dbhandler->getResults();
                $workType = self::returnWorkTypes($requestResults[0]['workTypeID']);
                $command = "SELECT `StreetNumber`,`Road`,`AreaName`,`locationID` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
                $dbhandler->runCommand($command,$requestResults[0]['Address']);
                $areaResults = $dbhandler->getResults();
                $command = "SELECT `locationName`,`City`,`Province` FROM `LOCATIONS` WHERE `locationID` = ?";
                $dbhandler->runCommand($command,$areaResults[0]['locationID']);
                $locationResults = $dbhandler->getResults();
                $command = "SELECT `Name`,`Surname`,`ContactNumber` FROM `REGISTERED_USER` WHERE `UserID` = ?";
                $dbhandler->runCommand($command,$requestResults[0]['UserID']);
                $userResults = $dbhandler->getResults();
                //By rights all the values gathered above should exist if a quote existed in the first place
                if(count($requestResults) > 0 && count($workType) > 0 && count($areaResults) > 0 && count($locationResults) > 0 && count($userResults) > 0) {
                    $returnValue[$j]['QuoteID'] = $result[$j]['QuoteID'];
                    $returnValue[$j]['JobDescription'] = $requestResults[0]['JobDescription'];
                    $returnValue[$j]['JobCommencementDate'] = $requestResults[0]['JobCommencementDate'];
                    $returnValue[$j]['workType'] = $workType[0]['WorkType'];
                    $returnValue[$j]['StreetNumber'] = $areaResults[0]['StreetNumber'];
                    $returnValue[$j]['Road'] = $areaResults[0]['Road'];
                    $returnValue[$j]['AreaName'] = $areaResults[0]['AreaName'];
                    $returnValue[$j]['locationName'] = $locationResults[0]['locationName'];
                    $returnValue[$j]['City'] = $locationResults[0]['City'];
                    $returnValue[$j]['Province'] = $locationResults[0]['Province'];
                    $returnValue[$j]['Name'] = $userResults[0]['Name'];
                    $returnValue[$j]['Surname'] = $userResults[0]['Surname'];
                    $returnValue[$j]['ContactNumber'] = $userResults[0]['ContactNumber'];
                }
                else{
                    //one of the requests did not complete successfully print out count to display which one if count is 0 request failed
                    $returnValue = false;
                }
            }

        }
        else{
            //This will occur when there are no notifications to be dealt with by the user immeadiately
            $returnValue = "There were no results to return where the homeuser has confirmed a request that was accepted by the homeuser";
        }
        return $returnValue;
    }

    public static function fetchProfileUserDetails($userID){
        $returnValue = false;
        $userType = self::fetchUserType();
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `REGISTERED_USER` WHERE `UserID` = ?";
        $dbhandler->runCommand($command,$userID);
        $userDetails = $dbhandler->getResults();
        //still some details that need to be added but hope you get the idea
        if(count($userDetails) > 0){
            $returnValue[0]['Username'] = $userDetails[0]['Username'];
            $returnValue[0]['Email'] = $userDetails[0]['Email'];
            $returnValue[0]['Name'] = $userDetails[0]['Name'];
            $returnValue[0]['Surname'] = $userDetails[0]['Surname'];
            $returnValue[0]['ContactNumber'] = $userDetails[0]['ContactNumber'];
            switch($userType){
                case 0:
                    //dealing with tradeworker tables related specifically to tradeworker
                    break;
                case 1:
                    //dealing with contractor tables related specifically to contractor
                    break;
                case 2:
                    //dealing with homeuser tables related specifically to homeuser
                    $command = "SELECT `Subscribed` FROM `HOMEUSER` WHERE `UserID` = ?";
                    $dbhandler->runCommand($command,$userID);
                    $homeuserDetails = $dbhandler->getResults();
                    //breaks the json object with this line of code
                  //  $returnValue[0]['Subscribed'] = $homeuserDetails[0]['Subscribed'];
                    break;
                default:
                    $returnValue = false;
                    break;
            }
        }
        return $returnValue;
    }

    public static function homeuserFetchRequests(){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "SELECT `RequestID`,`workTypeID`,`JobDescription`,`Address`,`DateInitialised`,`JobCommencementDate`,`NumberOfWorkersRequested`,`NumberOfWorkersAccepted` FROM `QUOTE_REQUEST` WHERE `UserID` = ?";
        $sessionHandler = self::fetchSessionHandler();
        $userID = $sessionHandler->getSessionVariable("UserID");
        $dbhandler->runCommand($command,$userID);

        $results = $dbhandler->getResults();
        $returnValue = false;
        $continue = false;
        $counter = 0;
        if(count($results) > 0){
            $test = count($results);
            for($j = 0;$j < count($results); $j++){
                $command = "SELECT `StreetNumber`,`Road`,`AreaName`,`locationID` FROM `AREA_PER_LOCATION` WHERE `AreaID` = ?";
                $dbhandler->runCommand($command,$results[$j]['Address']);
                $areaResults = $dbhandler->getResults();
                $command = "SELECT `locationName`,`City` FROM `LOCATIONS` WHERE `locationID` = ?";
                $dbhandler->runCommand($command,$areaResults[0]['locationID']);
                $locationResults = $dbhandler->getResults();
                $workType = self::returnWorkTypes($results[$j]['workTypeID']);
                $command = "SELECT `QuoteID`,`RequestedUser`,`Status` FROM `QUOTE` WHERE `RequestID` = ? AND `Status` = ? AND `HomeuserResponse` = ?";
                $test = $dbhandler->runCommand($command,$results[$j]['RequestID'],1,0);
                $quotes = $dbhandler->getResults();

                if(count($quotes) > 0){
                    $continue = true;
                    for($i = 0; $i < count($quotes); $i++) {
                        $command = "SELECT `Name`,`Surname`,`ContactNumber` FROM `REGISTERED_USER` WHERE `UserID` = ?";
                        $dbhandler->runCommand($command, $quotes[$i]['RequestedUser']);
                        $requestedUserDetails = $dbhandler->getResults();
                        if(count($requestedUserDetails) > 0){
                            $returnValue[$counter]['DateInitialised'] = $results[$j]['DateInitialised'];
                            $returnValue[$counter]['JobCommencementDate'] = $results[$j]['JobCommencementDate'];
                            $returnValue[$counter]['JobDescription'] = $results[$j]['JobDescription'];
                            $returnValue[$counter]['WorkType'] = $workType[0]['WorkType'];
                            $returnValue[$counter]['QuoteID'] = $quotes[$i]['QuoteID'];
                            $returnValue[$counter]['Name'] = $requestedUserDetails[0]['Name'];
                            $returnValue[$counter]['Surname'] = $requestedUserDetails[0]['Surname'];
                            $returnValue[$counter]['ContactNumber'] = $requestedUserDetails[0]['ContactNumber'];
                            $returnValue[$counter]['StreetNumber'] = $areaResults[0]['StreetNumber'];
                            $returnValue[$counter]['Road'] = $areaResults[0]['Road'];
                            $returnValue[$counter]['AreaName'] = $areaResults[0]['AreaName'];
                            $returnValue[$counter]['locationName'] = $locationResults[0]['locationName'];
                            $returnValue[$counter]['City'] = $locationResults[0]['City'];
                            $counter++;
                        }
                        else{
                            //This should not ever occur
                        }

                    }
                }
                else{
                    //There where no quotes that were accepted for request i
                }
            }
            //else handled by $continue, if $continue = false would mean that not one QuoteID with the required status was found for any of the requests

        }
        else{
            $returnValue = false;
        }

        if(!$continue){
            //There were no quotes that were accepted by any users for any of the requests
            $returnValue = false;
        }

        return $returnValue;
    }

    public static function homeuserInitiateJob($commencementDate,$numDays,$expectedPayment,$quoteID){
        $dbhandler = self::fetchDatabaseHandler();
        $estimimatedDate = date('Y-m-d',strtotime($commencementDate .' + '.$numDays.' days'));
        $returnValue = false;

        $command = "INSERT INTO `JOB_PER_USER` (`JobProceedDate`,`EstimatedCompletionDate`,`AgreedPrice`,`QuoteID`) VALUES (?,?,?,?)";

        if($dbhandler->runCommand($command,$commencementDate,$estimimatedDate,$expectedPayment,$quoteID)){
            $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `QuoteID` = ?";
            if($dbhandler->runCommand($command,3,$quoteID)){
                //TODO:Ensure no failure occurs during the initiation of a job for a requested tradeworker
                $command = "SELECT `RequestedUser`,`RequestID` FROM `QUOTE` WHERE `QuoteID` = ?";
                $dbhandler->runCommand($command,$quoteID);
                $result = $dbhandler->getResults();
                self::addNotification($result[0]['RequestedUser'],"Job has been intiated");
                $command = "UPDATE `TRADE_WORKER` SET `DateWorked` = ? WHERE `UserID` = ?";
                $dbhandler->runCommand($command,date("Y-m-d"),$result[0]['RequestedUser']);
                $command = "SELECT `NumberOfWorkersAccepted`,`NumberOfWorkersRequested` FROM `QUOTE_REQUEST` WHERE `RequestID` = ?";
                $dbhandler->runCommand($command,$result[0]['RequestID']);
                $workersAccepted = $dbhandler->getResults();
                $command = "UPDATE `QUOTE_REQUEST` SET `NumberOfWorkersAccepted` = ? WHERE `RequestID` = ?";
                $dbhandler->runCommand($command,intval($workersAccepted[0]['NumberOfWorkersAccepted'] + 1),$result[0]['RequestID']);
                if(intval($workersAccepted[0]['NumberOfWorkersAccepted'] + 1) == $workersAccepted[0]['NumberOfWorkersRequested']){
                    $command = "UPDATE `QUOTE_REQUEST` SET `Status` = ? WHERE `RequestID` = ?";
                    $dbhandler->runCommand($command,1,$result[0]['RequestID']);
                }
                $returnValue = true;
            }
            else
                $returnValue = false;
        }
        else{
            $returnValue = false;
        }
        return $returnValue;
    }

    public static function setUserAvailability($switchTo){
        $sessionHandler = self::fetchSessionHandler();
        $userID = $sessionHandler->getSessionVariable("UserID");
        $dbHandler = self::fetchDatabaseHandler();
        $command = "UPDATE `TRADE_WORKER` SET `Availability` = ? WHERE `UserID` = ?";
        if($switchTo == "true"){
            $dbHandler->runCommand($command,1,$userID);
            return true;
        }
        else if ($switchTo == "false"){
            $dbHandler->runCommand($command,0,$userID);
            return false;
        }
        else{
            return false;
        }
    }

    public static function setTradeworkerRequestConfirmation($quoteID){
        $dbhandler = self::fetchDatabaseHandler();
        $command = "UPDATE `QUOTE` SET `Status` = ? WHERE `QuoteID` = ?";
        if($dbhandler->runCommand($command,3,$quoteID)){
            return true;
        }
        else{
            return false;
        }
    }

    public static function adminFetchRegisteredUsers(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `REGISTERED_USER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchSpecializations(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `SPECIALIZATIONS`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchConfirmations(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `CONFIRMATIONS`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchHomeuserLocations(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `HOMEUSER_LOCATIONS`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchLocations(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `LOCATIONS`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchAreaPerLocations(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `AREA_PER_LOCATION`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchTradeworker(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `TRADE_WORKER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchLocationsPerUser(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `LOCATIONS_PER_USER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchSpecializationsPerUser(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `SPECIALIZATIONS_PER_USER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchHomeuser(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `HOMEUSER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchQuoteRequest(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `QUOTE_REQUEST`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchQuote(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `QUOTE`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchJobPerUser(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `JOB_PER_USER`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function adminFetchReasonForTermination(){
        $returnValue = null;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "SELECT * FROM `REASON_FOR_JOB_TERMINATION`";
        if($dbHandler->runCommand($command)){
            $returnValue = $dbHandler->getResults();
        }

        return $returnValue;
    }

    public static function fetchDatabaseTablesRequests(){
        $returnValue = null;
        $registerUsers = self::adminFetchRegisteredUsers();
        if($registerUsers != null){
            $returnValue['RegisteredUsers'] = $registerUsers;
        }

        $specializations = self::adminFetchSpecializations();
        if($specializations != null){
            $returnValue['Specializations'] = $specializations;
        }
        $confirmation = self::adminFetchConfirmations();
        if($confirmation != null){
            $returnValue['Confirmations'] = $confirmation;
        }
        $homeuserLocation = self::adminFetchHomeuserLocations();
        if($homeuserLocation != null){
            $returnValue['HomeuserLocations'] = $homeuserLocation;
        }
        $locations = self::adminFetchLocations();
        if($locations != null){
            $returnValue['Locations'] = $locations;
        }
        $areaPerLocations = self::adminFetchAreaPerLocations();
        if($areaPerLocations != null){
            $returnValue['AreaPerLocations'] = $areaPerLocations;
        }
        $tradeworkers = self::adminFetchTradeworker();
        if($tradeworkers != null){
            $returnValue['Tradeworkers'] = $tradeworkers;
        }
        $locationsPerUser = self::adminFetchLocationsPerUser();
        if($locationsPerUser != null){
            $returnValue['LocationsPerUser'] = $locationsPerUser;
        }
        $homeusers = self::adminFetchHomeuser();
        if($homeusers != null){
            $returnValue['Homeuser'] = $homeusers;
        }
        $quoteRequest = self::adminFetchQuoteRequest();
        if($quoteRequest != null){
            $returnValue['QuoteRequest'] = $quoteRequest;
        }
        $quote = self::adminFetchQuote();
        if($quote != null){
            $returnValue['Quote'] = $quote;
        }
        $jobPerUser = self::adminFetchJobPerUser();
        if($jobPerUser != null){
            $returnValue['JobPerUser'] = $jobPerUser;
        }
        $reasonForJobTermination = self::adminFetchReasonForTermination();
        if($reasonForJobTermination != null){
            $returnValue['ReasonForJobTermination'] = $reasonForJobTermination;
        }

        return $returnValue;
    }

    public static function fetchUserID(){
        $sessionHandler = self::fetchSessionHandler();
        $userID = $sessionHandler->getSessionVariable("UserID");
        $returnValue = null;
        if($userID != null){
            $returnValue = $userID;
        }
        return $returnValue;

    }

    public static function homeuserStopRequest($requestID){
        $returnValue = false;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "UPDATE `QUOTE_REQUEST` SET `Status` = ? WHERE `RequestID` = ?";
        if($dbHandler->runCommand($command,2,$requestID)){
            $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `RequestID` = ?";
            if($dbHandler->runCommand($command,2,$requestID)){
                $returnValue = true;
            }
        }

        return $returnValue;
    }

    public static function homeuserRemoveTradeworkerFromRequest($quoteID){
        $returnValue = false;
        $dbHandler = self::fetchDatabaseHandler();
        $command = "UPDATE `QUOTE` SET `HomeuserResponse` = ? WHERE `QuoteID` = ?";
        if($dbHandler->runCommand($command,2,$quoteID)){
            $returnValue = true;
        }

        return $returnValue;
    }

    public static function tradeworkerTerminateJob($jobID,$reason){
        $returnValue = false;
        $dbHandler = self::fetchDatabaseHandler();

        $userID = self::fetchSessionHandler()->getSessionVariable("UserID");
        $command = "UPDATE `JOB_PER_USER` SET `Status` = ?, `Notifier` = ?, `TradeworkerRequest` = ? WHERE `JobID` = ?";
        if($dbHandler->runCommand($command,2,1,2,$jobID)){
            $command = "INSERT INTO `REASON_FOR_JOB_TERMINATION` (`UserTerminated`,`JobID`,`Reason`) VALUES (?,?,?)";
            if($dbHandler->runCommand($command,$userID,$jobID,$reason)){
                $returnValue = true;
            }
        }

        return $returnValue;
    }

    public static function confirmTerminatedJobNotification($jobID){
        $dbHandler = self::fetchDatabaseHandler();
        $command = "UPDATE `JOB_PER_USER` SET `Notifier` = ? WHERE `JobID` = ?";
        if($dbHandler->runCommand($command,0,$jobID)){
            return true;
        }
        else{
            return false;
        }
    }

    public static function homeuserTerminateJob($jobID,$reason){
        $returnValue = false;
        $dbHandler = self::fetchDatabaseHandler();

        $userID = self::fetchSessionHandler()->getSessionVariable("UserID");
        $command = "UPDATE `JOB_PER_USER` SET `Status` = ?, `Notifier` = ? WHERE `JobID` = ?";
        if($dbHandler->runCommand($command,2,1,$jobID)){
            $command = "INSERT INTO `REASON_FOR_JOB_TERMINATION` (`UserTerminated`,`JobID`,`Reason`) VALUES (?,?,?)";
            if($dbHandler->runCommand($command,$userID,$jobID,$reason)){
                $returnValue = true;
            }
        }

        return $returnValue;
    }


    public static function userUpdateProfileDeials($name, $surname, $username, $email, $cellnumber):bool{
        $returnValue = false ;
        $dbHandler = self::fetchDatabaseHandler();
        $userID = self::fetchSessionHandler()->getSessionVariable("UserID");
        $command = "UPDATE `REGISTERED_USER` SET `Username` = ?,`Email` = ?,`Name` = ?,`Surname` = ?,`ContactNumber` = ? WHERE `UserID` = ?" ;
        if($dbHandler->runCommand($command,$username,$email,$name,$surname,$cellnumber,$userID)){
                $returnValue = "DB updated";
            }else
        {
            $returnValue = "did not update" ;
        }
        return $returnValue ;
    }

    public static function fetchHomeUserLocationDetails(){
        $returnValue = false;
        $dbHandler = self::fetchDatabaseHandler();
        $userID = self::fetchSessionHandler()->getSessionVariable("UserID");
        $command = "SELECT * FROM `HOMEUSER_LOCATIONS` WHERE `UserID` = ?";
        $dbHandler->runCommand($command,$userID);
            $userDetails = $dbHandler->getResults();
            //still some details that need to be added but hope you get the idea
            //`StreetNumber`,`Route`,`Sublocality`,`Locality`,`AdministrativeArea`
            if(count($userDetails) > 0) {
                $returnValue[0]['StreetNumber'] = $userDetails[0]['StreetNumber'];
                $returnValue[0]['Route'] = $userDetails[0]['Route'];
                $returnValue[0]['Sublocality'] = $userDetails[0]['Sublocality'];
                $returnValue[0]['Locality'] = $userDetails[0]['Locality'];
                $returnValue[0]['AdministrativeArea'] = $userDetails[0]['AdministrativeArea'];
            }else{
                $returnValue = false ;
            }
        return $returnValue ;
    }

    public static function fetchTradeworkerLocationDetails() {
        $returnValue = false ;
        $dbHandler = self::fetchDatabaseHandler();
        $userID = self::fetchSessionHandler()->getSessionVariable("UserID");
        $locations = array();
        $command = "SELECT `locationID` FROM `LOCATIONS` WHERE `UserID` = ?";
        $dbHandler->runCommand($command,$userID);
        $lID = $dbHandler->getResults();
        if(count($lID) > 0){
            $command = "SELECT * FROM `LOCATIONS_PER_USER` WHERE `UserID` =? AND `LocationID` =?";
            $dbHandler->runCommand($command, $userID,lID);
            $locations = $dbHandler->getResults();
            if(count($locations)>0) {
                $returnValue = $locations;
            }else{
                $returnValue = false;
            }
        }
        else{
            $returnValue = false;
        }
    }
    //The following method is used when the homeuser presses complete job
    public static function homeuserJobCompletionPhotoAdditionHelper($jobID,$userID){
        $command = "INSERT INTO `PICTURES_PER_JOB` (`JobID`, `UserID`, `PictureName`,`HomeuserAccepted`) VALUES (?,?,?,?)";
        $returnValue = true;
        $myFile = $_FILES['homeuser-initiateJobCompletion-Picture-0'];

        for($j = 0;$j < count($myFile['name']);$j++){
            $pictureName = basename($myFile["name"][$j]);
            $dbhandler = self::fetchDatabaseHandler();
            if($dbhandler->runCommand($command,$jobID,$userID,$pictureName,1)){
                $picID = $dbhandler->getInsertID();
                $uniquePicName = $picID."_".$jobID."_".$userID."_";
                $returnValue &= SebenzaServer::addMultiplePictureToServer($j,$uniquePicName);

            }
            else{
                $returnValue &= false;
            }
        }

        return (bool)$returnValue;
    }
    public static  function homeuserNotOverallSatisfiedWithCompletedJob($jobID){
        //$_POST['homeuser-initiateJobCompletion-jobSatisfaction-switch'] != 'true' || $_POST['homeuser-initiateJobCompletion-userRecommendation-switch'] != "true"
        $jobReview = -1;
        $jobReason = "Not given";
        if($_POST['homeuser-initiateJobCompletion-jobSatisfaction-switch'] != 'true'){
            $jobReview = 2;
            $jobReason = $_POST['homeuser-initiateJobCompletion-jobComment'];
        }
        else
            $jobReview = 1;

        $workerReview = -1;
        $workerReason = "Not given";
        if($_POST['homeuser-initiateJobCompletion-userRecommendation-switch'] != "true"){
            $workerReview = 2;
            $workerReason = $_POST['homeuser-initiateJobCompletion-userComment'];
        }
        else{
            $workerReview = 1;
        }

        $command = "UPDATE `JOB_PER_USER` SET `Status` = ?, `Notifier` = ? WHERE `JobID` = ?";
        $dbhandler = self::fetchDatabaseHandler();
        $userID = self::fetchUserID();
        if($dbhandler->runCommand($command,1,1,$jobID)){
            $command = "INSERT INTO `REVIEW_PER_JOB` (`JobID`, `UserID`, `JobSatisfaction`, `TradeworkerSatisfaction`) VALUES (?,?,?,?)";
            if($dbhandler->runCommand($command,$jobID,$userID,$jobReview,$workerReview)){
                $reviewID = $dbhandler->getInsertID();
                if($workerReview == 2){
                    $command = "INSERT INTO `REASON_FOR_DISSATISFACTION` (`ReviewID`, `Explanation`, `Selection`) VALUES (?,?,?)";
                    $dbhandler->runCommand($command,$reviewID,$jobReason,0);
                }

                if($jobReview == 2){
                    $command = "INSERT INTO `REASON_FOR_DISSATISFACTION` (`ReviewID`, `Explanation`, `Selection`) VALUES (?,?,?)";
                    $dbhandler->runCommand($command,$reviewID,$workerReason,1);
                }
                //adding the picture to the system, add the name of the picture to the database so that it can be displayed to users.
                if($_POST['homeuser-initiateJobCompletion-pictureAddition-switch'] == 'true')
                    $returnValue = self::homeuserJobCompletionPhotoAdditionHelper($jobID,$userID);
                else
                    $returnValue = true;

            }
            else{
                $returnValue = false;
            }
        }
        else{
            $returnValue = false;
        }
        return $returnValue;
    }

    public static function addMultiplePictureToServer($counter,$uniqueID){
        $target_dir = "../../UploadedPictures/".$uniqueID;
        $target_file = $target_dir . basename($_FILES["homeuser-initiateJobCompletion-Picture-0"]["name"][$counter]);
        $uploadOk = 1;
        $value = "";
        $imageFileType = pathinfo($target_file,PATHINFO_EXTENSION);
        // Check if image file is a actual image or fake image
        //if(isset($_POST["submit"])) {
        $check = getimagesize($_FILES["homeuser-initiateJobCompletion-Picture-0"]["tmp_name"][$counter]);
        if($check !== false) {
            $response = "Is image";
            $value .= "Is image";
            $uploadOk = 1;
        } else {
            $value .= "File is not an image.";
            $value .=$_FILES["homeuser-initiateJobCompletion-Picture-0"]["name"][$counter];
            $response = "File is not an image.";
            $uploadOk = 0;
        }

        if (file_exists($target_file)) {
            $response = "Sorry, file already exists.";
            $value .= "Sorry, file already exists.";
            $uploadOk = 0;
        }

        if ($_FILES["homeuser-initiateJobCompletion-Picture-0"]["size"][$counter] > 500000) {
            $value .= "Sorry, your file is too large.";
            $response = "Sorry, your file is too large.";
            $uploadOk = 0;
        }

        // Allow certain file formats
        if($imageFileType != "jpg" && $imageFileType != "png" && $imageFileType != "jpeg"
            && $imageFileType != "gif" ) {
            $value .= "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
            $response = "Sorry, only JPG, JPEG, PNG & GIF files are allowed.";
            $uploadOk = 0;
        }

        if ($uploadOk == 0) {
            $value .= "Sorry, your file was not uploaded..";
            $response = "Sorry, your file was not uploaded..";
            // if everything is ok, try to upload file
        } else {
            if (move_uploaded_file($_FILES["homeuser-initiateJobCompletion-Picture-0"]["tmp_name"][$counter], $target_file)) {
                $response = true;
            } else {
                $response = "Sorry, there was an error uploading your file.";

            }
        }

        return $response;
    }

}
//The following is currently used to receive the confirmation requests from the user
if (!empty($_GET)){
    if(isset($_GET['email']) && isset($_GET['key'])){
        //If this returns false one could log the false returns to see if unwanted entry into the server occurred
            $result = SebenzaServer::userConfirm($_GET['email'],$_GET['key']);

        if($result){
            SebenzaServer::logout();
        }
        //Email link e.g. localhost:31335/index.php?email="teat@test.com"&key="test"
    }
}

//TODO:I think second-level validation should occur here for in case the sebenza.js file is overwritten with a malicious version
//The following code handles ajax requests sent to SessionModule.php as in sebenza.js for the login functionality
if (!empty($_POST)) {
    //Synchronise the time and start output buffering (an AJAX request can happen separate from an official page load)
    SebenzaServer::start();
    //AJAX requests are served some sort of textual response (usually JSON for easier handling by JavaScript)
    $response = "";
    if (isset($_POST['action'])) {
        $action = $_POST['action'];
        switch ($action) {
            case 'fetch_notifications':
                $response = json_encode(SebenzaServer::pullNotifications());
                break;
            case 'login':
                if (isset($_POST['username']) && isset($_POST['password'])) {
                    $response = json_encode(SebenzaServer::login($_POST['username'], $_POST['password']));
                } else {
                    $response = json_encode(false);
                }
                break;
            case 'logout':
                $response = json_encode(true);
                SebenzaServer::logout();
                break;
            case 'homeuser-remove-request':
                //$response = json_encode("Should be removing the request from the server");
                $condition = SebenzaServer::serverSecurityCheck();

                if($condition){
                    if(isset($_POST['ignore-homeuser-selected-request-id']))
                    $response = json_encode(SebenzaServer::homeuserStopRequest($_POST['ignore-homeuser-selected-request-id']));
                }
                else{
                    return json_encode(false);
                }
                break;
            case 'homeuser-remove-tradeworker-from-request':
                $condition = SebenzaServer::serverSecurityCheck();
                if($condition){
                    if(isset($_POST['ignore-homeuser-manage-specificRequest-ID'])){
                        $response = json_encode(SebenzaServer::rejectRequest($_POST['ignore-homeuser-manage-specificRequest-ID']));
                    }
                    else if(isset($_POST['ignore-homeuser-selected-initiate-job-id'])){
                        $response = json_encode(SebenzaServer::rejectRequest($_POST['ignore-homeuser-selected-initiate-job-id']));
                    }
                    else{
                        $response = json_encode(false);
                    }

                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'set-availability':
                $pass = SebenzaServer::serverSecurityCheck();
                if($pass) {
                    if (isset($_POST['availability-tradeworker-mainpage-switch'])) {
                        $response = json_encode(SebenzaServer::setUserAvailability($_POST['availability-tradeworker-mainpage-switch']));
                    }
                    else{
                        $response = json_encode(false);
                    }
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'homeuser-initiateJobCompletion-request':
                //$response = json_encode("Should be completing the job for tradeworker");
                // basename($_FILES["homeuser-initiateJobCompletion-Picture-0"]["name"]) get fileName to add to the database then retrieve that value to make up the proceeding next value
                // unique value sent to be picture name - $picID,$jobID,$userID
                if(isset($_POST['homeuser-initiateJobCompletion-jobSatisfaction-switch']) && isset($_POST['homeuser-initiateJobCompletion-userRecommendation-switch']) && isset($_POST['homeuser-initiateJobCompletion-pictureAddition-switch'])){
                    //homeuser is satisfied with the job as well as with the tradeworker and he has added a picture
                   if($_POST['homeuser-initiateJobCompletion-jobSatisfaction-switch'] == 'true' && $_POST['homeuser-initiateJobCompletion-userRecommendation-switch'] == "true" && $_POST['homeuser-initiateJobCompletion-pictureAddition-switch'] == "true"){
                       //Set the job satisfaction to thumbs up as well as set the tradeworker satisfaction to thumbs up
                       if(isset($_POST['ignore-homeuser-initiateJobCompletion-jobID'])){
                           $response = json_encode(SebenzaServer::homeuserNotOverallSatisfiedWithCompletedJob($_POST['ignore-homeuser-initiateJobCompletion-jobID']));
                       }
                       else{
                           $response = json_encode(false);
                       }
                   }
                    else if($_POST['homeuser-initiateJobCompletion-jobSatisfaction-switch'] != 'true' || $_POST['homeuser-initiateJobCompletion-userRecommendation-switch'] != "true" || $_POST['homeuser-initiateJobCompletion-pictureAddition-switch'] != "true"){
                        if(isset($_POST['ignore-homeuser-initiateJobCompletion-jobID'])){
                            $response = json_encode(SebenzaServer::homeuserNotOverallSatisfiedWithCompletedJob($_POST['ignore-homeuser-initiateJobCompletion-jobID']));
                        }
                        else{
                            $response = json_encode(false);
                        }
                    }
                    //TODO: Need to add all the other cases where the homeuser is either not happy with the job or the tradeworker or if pictures aren't uploaded.
                }
                else{
                    $response = json_encode(false);
                }


                break;
            case 'homeuser-initiateJobExtension-request':
                $response = json_encode("Should be extending the job for the tradeworker selected server response");
                break;
            case 'tradeworker-accept-jobTerminated-confirmation':
                $condition = SebenzaServer::serverSecurityCheck();
                if($condition){
                    if(isset($_POST['ignore-tradeworker-confirm-jobTermination-ID']))
                        $response = json_encode(SebenzaServer::confirmTerminatedJobNotification($_POST['ignore-tradeworker-confirm-jobTermination-ID']));
                    else
                        $response = json_encode(false);
                }
                else{
                    $response = json_encode(false);
                }

                break;
            case 'register-contractor':
                //Ensure all skill are set
                $condition = true;
                $test = 1;
                if(isset($_POST['ignore-sillsAdded-contractor'])){
                    for($k = 0; $k < $_POST['ignore-sillsAdded-contractor'];$k++){
                        if(!isset($_POST['contractor-work-type-'.$k])){
                            $condition = false;
                        }
                    }
                }
                else {
                    $condition = false;
                }
                if(!isset($_POST['ignore-availability-contractor'])) {
                    $condition = false;
                }

                //Ensure all locations are set
                if(isset($_POST['ignore-locationsAdded-contractor'])){
                    for($k = 0; $k < $_POST['ignore-locationsAdded-contractor'];$k++){
                        if(!isset($_POST['areaname-contractor-'.$k])){
                            $condition = false;
                        }
                        if(!isset($_POST['cityname-contractor-'.$k])){
                            $condition = false;
                        }
                        if(!isset($_POST['provincename-contractor-'.$k])){
                            $condition = false;
                        }
                        //$test .= $_POST['provincename-contractor-'.$k]." ".$_POST['cityname-contractor-'.$k]." ".$_POST['areaname-contractor-'.$k]." ";
                    }
                }
                else{
                    $condition = false;
                    //$response = json_encode("It got here1");
                }

                //Ensure that if the business is VAT registered to store appropriate details like the business registration number and the business's vat number
                if(isset($_POST['ignore-exampleSwitch'])) {
                    if($_POST['ignore-exampleSwitch'] == "on"){
                        //TODO: not 100% sure on this if statement must definitely test it
                        if(!isset($_POST['reg-contractor']) || !isset($_POST['vat-contractor']) ) {
                            $condition = false;
                        }
                        if(isset($_POST['reg-contractor'])){
                            $boolean = SebenzaServer::isUnique(intval($_POST['reg-contractor']), "BusinessRegistrationNum", "contractor");
                            if (!$boolean)
                                $test *= 7;

                        }
                        if(isset($_POST['vat-contractor'])){
                            $boolean = SebenzaServer::isUnique(intval($_POST['vat-contractor']), "BusinessVatNum", "contractor");
                            if (!$boolean)
                                $test *= 5;
                        }


                    }
                }
                else{
                    $condition = false;
                    //$response = json_encode("It got here3");
                }


                //$test .= " ".$_POST['ignore-sillsAdded-contractor']." ".$_POST['ignore-locationsAdded-contractor']." ".$_POST['ignore-exampleSwitch']." ";
                //Ensure all the rest of the variables are set
                if($condition) {

                    if (isset($_POST['name-contractor']) && isset($_POST['surname-contractor']) && isset($_POST['username-contractor']) && isset($_POST['password-contractor']) && isset($_POST['confirmPassword-contractor']) && isset($_POST['email-contractor']) && isset($_POST['confirmEmail-contractor']) && isset($_POST['cellnumber-contractor']) && isset($_POST['homeNumber-contractor']) && isset($_POST['busName']) && isset($_POST['address-contractor']) && isset($_POST['areaname-contractor-0']) && isset($_POST['cityname-contractor-0']) &&isset($_POST['business-description-contractor']) && isset($_POST['business-hours-from-contractor']) && isset($_POST['business-hours-to-contractor']) && isset($_POST['provincename-contractor-0'])) {
                        $boolean = SebenzaServer::isUnique($_POST['busName'],"BusinessName", "contractor");
                        if(!$boolean)
                            $test *= 11;
                        $boolean = SebenzaServer::isUnique($_POST['email-contractor'],"Email", "registered_users");
                        if(!$boolean)
                            $test *= 3;
                        $boolean = SebenzaServer::isUnique($_POST['username-contractor'],"Username", "registered_users");
                        if(!$boolean)
                            $test *= 2;


                        if($test == 1){
                            $response = json_encode(SebenzaServer::register([$_POST['username-contractor'], $_POST['email-contractor'], $_POST['cellnumber-contractor'], $_POST['password-contractor'], $_POST['surname-contractor'], $_POST['name-contractor'], $_POST['ignore-locationsAdded-contractor'],$_POST['busName'],$_POST['address-contractor'],$_POST['ignore-sillsAdded-contractor'],$_POST['business-description-contractor'],$_POST['business-hours-from-contractor'],$_POST['business-hours-to-contractor'],$_POST['ignore-availability-contractor']], 'contractor'));
                        }
                        else{
                            $response = $test;
                        }

                        //$response = json_encode("It got here");
                    } else {
                        $response = json_encode(false);
                        //$response = json_encode("It got here2");
                    }
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'register-tradeWorker':
                $condition = true;
                $uniqueIndicator = 1;
                //Validating singular entries will not be more than one
                if(!isset($_POST["name-tradeWorker"]) &&!isset($_POST["identity-tradeWorker"]) && !isset($_POST["surname-tradeWorker"]) && !isset($_POST["username-tradeWorker"]) && !isset($_POST["password-tradeWorker"]) && !isset($_POST["email-tradeWorker"]) && !isset($_POST["cellnumber-tradeWorker"]) && !isset($_POST["homeNumber-tradeWorker"]) && !isset($_POST["availability-tradeWorker-switch"]) && !isset($_POST["homeNumber-tradeWorker"])){
                    $uniqueIndicator *= 7;
                }
                //Doing unique check for entries within REGISTERED_USER
                if(!SebenzaServer::isUnique($_POST["email-tradeWorker"],"Email", "registered_users")){
                    $uniqueIndicator *= 2;
                }
                if(!SebenzaServer::isUnique($_POST["username-tradeWorker"],"Username", "registered_users")){
                    $uniqueIndicator *= 3;
                }
                if(!SebenzaServer::isUnique($_POST["identity-tradeWorker"],"PersonalID", "registered_users")){
                    $uniqueIndicator *= 5;
                }

                //Doing validation on locations added, this can be as many as the user likes no limit
                if(isset($_POST["ignore-locationsAdded-tradeWorker"])){
                    for($j = 0 ; $j < $_POST["ignore-locationsAdded-tradeWorker"]; $j++){
                        if(!isset($_POST["areaname-tradeWorker-".$j]) && !isset($_POST["cityname-tradeWorker-".$j]) && !isset($_POST["provincename-tradeWorker-".$j])){
                            $uniqueIndicator *= 7;
                        }
                    }
                }
                else{
                    $uniqueIndicator *= 7;
                }

                //Doing validation on skills added, maximum of three, minimum of one
                if(isset($_POST["ignore-sillsAdded-tradeWorker"])){
                    for($j = 0 ; $j < $_POST["ignore-sillsAdded-tradeWorker"]; $j++){
                        if(!isset($_POST["tradeWorker-work-type-".$j])){
                            $uniqueIndicator *= 7;
                        }
                    }
                }
                else{
                    $uniqueIndicator *= 7;
                }


                if($uniqueIndicator == 1){
                    $response = json_encode(SebenzaServer::register([$_POST["username-tradeWorker"],$_POST["email-tradeWorker"],$_POST["name-tradeWorker"],$_POST["identity-tradeWorker"],$_POST["surname-tradeWorker"],$_POST["password-tradeWorker"],$_POST["cellnumber-tradeWorker"],$_POST["homeNumber-tradeWorker"],$_POST["availability-tradeWorker-switch"],$_POST["ignore-locationsAdded-tradeWorker"],$_POST["ignore-sillsAdded-tradeWorker"]],'tradeworker'));
                }
                else{
                    // $response mod(2) == 0 means email address was not unique
                    // $response mod(3) == 0 means username was not unique
                    // $response mod(5) == 0 means ID was not unique
                    // $response mod(7) == 0 means one or more POST was not unique
                    // $response mod(101) == 0 means the confirmation email could not be sent
                    $response = json_encode($uniqueIndicator);
                }
                break;
            case 'register-homeuser':
                //All entries are single entries so validation can occur in one step
                $uniqueIndicator = 1;
                if(isset($_POST['username-homeuser']) && isset($_POST['name-homeuser']) && isset($_POST['surname-homeuser']) && isset($_POST['password-homeuser']) && isset($_POST['email-homeuser']) && isset($_POST['cellnumber-homeuser']) && isset($_POST['homeNumber-homeuser']) && isset($_POST['identity-homeuser']) && isset($_POST['subscription-homeuser-switch']) && isset($_POST['homeuser-register-street_number']) && isset($_POST['homeuser-register-route']) && isset($_POST['homeuser-register-sublocality_level_1']) && isset($_POST['homeuser-register-locality']) && isset($_POST['homeuser-register-administrative_area_level_1'])){
                    if(!SebenzaServer::isUnique($_POST["email-homeuser"],"Email", "registered_users")){
                        $uniqueIndicator *= 2;
                    }
                    if(!SebenzaServer::isUnique($_POST["username-homeuser"],"Username", "registered_users")){
                        $uniqueIndicator *= 3;
                    }
                    if(!SebenzaServer::isUnique($_POST["identity-homeuser"],"PersonalID", "registered_users")){
                        $uniqueIndicator *= 5;
                    }
                    if($uniqueIndicator == 1){
                        $response = json_encode(SebenzaServer::register([$_POST['username-homeuser'],$_POST['email-homeuser'],$_POST['name-homeuser'],$_POST['surname-homeuser'],$_POST['password-homeuser'],$_POST['cellnumber-homeuser'],$_POST['homeNumber-homeuser'],$_POST['identity-homeuser'],$_POST['subscription-homeuser-switch'],$_POST['homeuser-register-street_number'],$_POST['homeuser-register-route'],$_POST['homeuser-register-sublocality_level_1'],$_POST['homeuser-register-locality'],$_POST['homeuser-register-administrative_area_level_1']],'homeuser'));
                    }
                    else{
                        $response = json_encode($uniqueIndicator);
                    }

                } else{
                    $response = json_encode($uniqueIndicator *= 11);
                }
                break;
            case 'homeuser-ongoingJob-remove-tradeworker':
                $condition = SebenzaServer::serverSecurityCheck();

                if($condition){
                    if(isset($_POST['ignore-homeuser-ongoingJobs-jobID-toRemove']) && isset($_POST['homeuser-terminateJob-reason'])){
                        $response = json_encode(SebenzaServer::homeuserTerminateJob($_POST['ignore-homeuser-ongoingJobs-jobID-toRemove'],$_POST['homeuser-terminateJob-reason']));
                    }
                    else{
                        $response = json_encode(false);
                    }

                }
                else{
                    $response = json_encode(false);
                }

                break;
            case 'fetch-job-requests':
                if(SebenzaServer::serverSecurityCheck()){
                    $result = SebenzaServer::fetchUserType();
                    //Due to information being sent back being different for all the users switch case to check the type of user before calling the function
                    $response = json_encode($result);
                    if($result != -1)
                    switch ($result){
                        case "3":
                            $response = json_encode(SebenzaServer::fetchDatabaseTablesRequests());
                            break;
                        case "1":
                            //Contractor
                            $response = json_encode("Should be dealing with contractor request job management");
                            break;
                        case "2":
                            //Homeuser
//                            $response = json_encode("Should be dealing with homeuser request job management");
                            $response = json_encode(SebenzaServer::fetchHomeuserJobRequests(SebenzaServer::fetchSessionHandler()->getSessionVariable("UserID")));
                            break;
                        case "0":
                            //Tradeworker
                            $response = json_encode(SebenzaServer::fetchTradeworkerJobRequests(SebenzaServer::fetchSessionHandler()->getSessionVariable("UserID")));
                            break;
                        default:
                            $response = json_encode("Unrecognized");
                            break;
                    }


                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'fetch-worker-locations':
                $response = json_encode(SebenzaServer::fetchWorkingLocationDetails());
                break;
            case 'homeuser-initiateJob-request':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue){
                   if(isset($_POST['homeuser-initiateJob-commenceDate']) && isset($_POST['homeuser-initiateJob-numberDays']) && isset($_POST['homeuser-initiateJob-expectedPayment']) && isset($_POST['ignore-homeuser-initiateJob-quoteID'])){
                       $response = json_encode(SebenzaServer::homeuserInitiateJob($_POST['homeuser-initiateJob-commenceDate'],$_POST['homeuser-initiateJob-numberDays'],$_POST['homeuser-initiateJob-expectedPayment'],$_POST['ignore-homeuser-initiateJob-quoteID']));
                   }
                   else if(isset($_POST['homeuser-initiateJob-shortcut-commenceDate']) && isset($_POST['homeuser-initiateJob-shortcut-numberDays']) && isset($_POST['homeuser-initiateJob-shortcut-expectedPayment']) && isset($_POST['ignore-homeuser-initiateJob-shortcut-quoteID'])){
                       $response = json_encode(SebenzaServer::homeuserInitiateJob($_POST['homeuser-initiateJob-shortcut-commenceDate'],$_POST['homeuser-initiateJob-shortcut-numberDays'],$_POST['homeuser-initiateJob-shortcut-expectedPayment'],$_POST['ignore-homeuser-initiateJob-shortcut-quoteID']));
                   }
                    else{
                        $response = json_encode(false);
                    }

                }
                else{
                    $response = json_encode(false);
                }

                break;
            case 'tradeworker-reject-request':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue){
                    if(isset($_POST['ignore-tradeworker-selected-request-id'])) {
                        $response = json_encode(SebenzaServer::rejectRequest($_POST['ignore-tradeworker-selected-request-id']));
                    }
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'tradeworker-accept-request':
                $continue = SebenzaServer::serverSecurityCheck();

                if($continue){
                    if(isset($_POST['ignore-tradeworker-selected-request-id'])) {
                        $response = json_encode(SebenzaServer::acceptRequest($_POST['ignore-tradeworker-selected-request-id']));
                    }
                }
                else{
                    $response = json_encode(false);
                }

                break;
            case 'tradeworker-requests-accepted-notifications':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue){
                    $response = json_encode(SebenzaServer::tradeworkerFetchRequests());
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'tradeworker-accept-confirmation':
                $continue = SebenzaServer::serverSecurityCheck();
                if(isset($_POST['ignore-tradeworker-request-notification-quoteID'])){
                    $response = json_encode(SebenzaServer::setTradeworkerRequestConfirmation($_POST['ignore-tradeworker-request-notification-quoteID']));
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'homeuser-requests-accepted-notifications':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue){
                    $response = json_encode(SebenzaServer::homeuserFetchRequests());
                }
                else{
                    $response = json_encode(false);
                }

                break;
            case 'fetch_work_types':
                $response = json_encode(SebenzaServer::returnWorkTypes());
//                $response = json_encode("This is a test");
                break;
            case 'contractor-rTradeworker':
                $condition = true;

                if(isset($_POST['ignore-actual-nTradeworkers-contractor-rTradeworker'])){
                    for($j =0;$j<$_POST['ignore-actual-nTradeworkers-contractor-rTradeworker'];$j++){
                        if(!isset($_POST['contractor-rTradeworker-work-type-'.$j]) || !isset($_POST['nTradeworkers-contractor-rTradeworker-'.$j]) || !isset($_POST['job-description-contractor-rTradeworker-'.$j])){
                            $condition = false;
                        }
                    }

                }
                else{
                    $condition = false;
                }

                if($condition){
                    if(isset($_POST['commencement-homeuser-rTradeworker']) && isset($_POST['homeuser-rTradeworker-street_number']) && isset($_POST['homeuser-rTradeworker-route']) && isset($_POST['homeuser-rTradeworker-sublocality_level_1']) && isset($_POST['homeuser-rTradeworker-locality']) && isset($_POST['homeuser-rTradeworker-administrative_area_level_1']) && isset($_POST['homeuser-rTradeworker-postal_code']) && isset($_POST['homeuser-rTradeworker-country']) && isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                        $condition = SebenzaServer::homeUserRequestTradeworker([$_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'],$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker']]);
//                        $condition = true;
                    }
                    else{
                        $condition = false;
                    }
                }

                $response = json_encode($condition);

                break;
            case 'homeuser-rTradeworker':
                $condition = true;

                if(isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                    for($j =0;$j<$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'];$j++){
                        if(!isset($_POST['homeuser-rTradeworker-work-type-'.$j]) || !isset($_POST['nTradeworkers-homeuser-rTradeworker-'.$j]) || !isset($_POST['job-description-homeuser-rTradeworker-'.$j])){
                            $condition = false;
                        }
                    }

                }
                else{
                    $condition = false;
                }

                if($condition){
                    if(isset($_POST['commencement-homeuser-rTradeworker']) && isset($_POST['homeuser-rTradeworker-street_number']) && isset($_POST['homeuser-rTradeworker-route']) && isset($_POST['homeuser-rTradeworker-sublocality_level_1']) && isset($_POST['homeuser-rTradeworker-locality']) && isset($_POST['homeuser-rTradeworker-administrative_area_level_1']) && isset($_POST['homeuser-rTradeworker-postal_code']) && isset($_POST['homeuser-rTradeworker-country']) && isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                        $condition = SebenzaServer::homeUserRequestTradeworker([$_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'],$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker']]);
//                        $condition = true;
                    }
                    else{
                        $condition = false;
                    }
                }

                $response = json_encode($condition);
                break;
            case 'homeuser-accept-request':
                if(isset($_POST['ignore-homeuser-request-notification-quoteID'])){
                    $response = json_encode(SebenzaServer::acceptRequest($_POST['ignore-homeuser-request-notification-quoteID']));
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'homeuser-deny-request':
                if(isset($_POST['ignore-homeuser-request-notification-quoteID'])){
                    $response = json_encode(SebenzaServer::rejectRequest($_POST['ignore-homeuser-request-notification-quoteID']));
                }
                else{
                    $response = json_encode(false);
                }
                break;
            case 'fetch-homeuser-profile-details':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    $response = json_encode(SebenzaServer::fetchProfileUserDetails(SebenzaServer::fetchSessionHandler()->getSessionVariable("UserID")));
                }else{
                    $response = false ;
                }
                break;
            case 'fetch-tradeworker-profile-details' :
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    $response = json_encode(SebenzaServer::fetchProfileUserDetails(SebenzaServer::fetchSessionHandler()->getSessionVariable("UserID")));
                }else{
                $response = false ;
                }

                break;

            case'tradeworker-update-information':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    if(isset($_POST['name-tradeworker-edit'])&& isset($_POST['surname-tradeworker-edit'])
                        && isset($_POST['username-tradeworker-edit'])&& isset($_POST['email-tradeworker-edit'])
                        && isset($_POST['cellnumber-tradeworker-edit'])){
                        $response = json_encode(SebenzaServer::userUpdateProfileDeials(SebenzaServer::fetchSessionHandler()
                            ->getSessionVariable("UserID"),$_POST['name-tradeworker-edit'],$_POST['surname-tradeworker-edit'],
                            $_POST['username-tradeworker-edit'],$_POST['email-tradeworker-edit'],$_POST['cellnumber-tradeworker-edit']));
                    }else{
                        $response = json_encode("Not Set") ;
                    }
                }else{
                    $response= json_encode("Error") ;
                }
                break;
            case'homeuser-update-information':
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    $response = json_encode("A+") ;
                    if(isset($_POST['name-homeuser-edit'])&&isset($_POST['surname-homeuser-edit'])
                        &&isset($_POST['username-homeuser-edit'])&&isset($_POST['email-homeuser-edit'])
                        &&isset($_POST['cellnumber-homeuser-edit']))
                    {
                        $response = json_encode(SebenzaServer::userUpdateProfileDeials($_POST['name-homeuser-edit'],
                            $_POST['surname-homeuser-edit'],$_POST['username-homeuser-edit'],$_POST['email-homeuser-edit']
                            ,$_POST['cellnumber-homeuser-edit']));
                   }else{
                        $response = json_encode("Not Set") ;
                    }
                }else{
                    $response= json_encode("Error") ;
                }
                break;

            case'fetch-homeuser-location-details' :
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    $response = json_encode(SebenzaServer::fetchHomeUserLocationDetails()) ;
                }else{
                    $response = json_encode(false) ;
                }
                break;
            case'fetch-tradeworker-location-details' :
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    $response = json_encode(SebenzaServer::fetchTradeworkerLocationDetails()) ;
                }else{
                    $response = json_encode(false) ;
                }

                break;

            case'update-tradeworker-location-details':
                //TODO: Actually update the user location this will be a bit more complex involving for loops
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    if(isset($_POST["tradeworker-loc-street_number"]) && isset($_POST["homeuser-loc-route"]) && isset($_POST["homeuser-loc-sublocality_level_1"])
                        && isset($_POST["homeuser-loc-locality"]) && isset($_POST["homeuser-loc-administrative_area_level_1"])){
                        $response = json_encode(true) ;
                    }else{
                        $response = json_encode(false) ;
                    }
                }else{
                    $resonse = json_encode(false) ;
                }
                break;
            case'update-homeuser-location-details':
            //TODO: Actually update the user location
                $continue = SebenzaServer::serverSecurityCheck();
                if($continue)
                {
                    if(isset($_POST["homeuser-loc-street_number"]) && isset($_POST["homeuser-loc-route"]) && isset($_POST["homeuser-loc-sublocality_level_1"])
                        && isset($_POST["homeuser-loc-locality"]) && isset($_POST["homeuser-loc-administrative_area_level_1"])){
                        $response = json_encode(true) ;
                    }else{
                        $response = json_encode("Not Set") ;
                    }
                }else{
                    $resonse = json_encode(false) ;
                }
                break ;

            case 'android-fetchUserDetails':
                if(isset($_POST['android-username'])) {
                    $response = json_encode(SebenzaServer::testServer($_POST['android-username']));
                }else{
                    json_encode(false);
                }
                break;
            case 'android-fetch-job-requests':
                if(isset($_POST['android-usertype']) && isset($_POST['android-UserID'])){
                $result = $_POST['android-usertype'];
                    //Due to information being sent back being different for all the users switch case to check the type of user before calling the function
                    $response = json_encode($result);
                    if($result != -1)
                        switch ($result){
                            case "3":
                                $response = json_encode(SebenzaServer::fetchDatabaseTablesRequests());
                                break;
                            case "1":
                                //Contractor
                                $response = json_encode("Should be dealing with contractor request job management");
                                break;
                            case "2":
                                //Homeuser
//                            $response = json_encode("Should be dealing with homeuser request job management");
                                $response = json_encode(SebenzaServer::fetchHomeuserJobRequests($_POST['android-UserID']));
                                break;
                            case "0":
                                //Tradeworker
                                $response = json_encode(SebenzaServer::fetchTradeworkerJobRequests($_POST['android-UserID']));
                                break;
                            default:
                                $response = json_encode("Unrecognized User");
                                break;
                        }

                else{
                    $response = json_encode(false);
                }
                }
                break;
            case 'android-tradeworker-accept-request':
                if(isset($_POST['android-tradeworker-selected-request-id']) && isset($_POST['android-UserID']) && isset($_POST['android-usertype'])) {
                    $response = json_encode(SebenzaServer::acceptRequestAndroid($_POST['android-tradeworker-selected-request-id'],$_POST['android-UserID'],$_POST['android-usertype']));
                }else{
                    $response = json_encode(false);
                }

                break;
            case 'android-homeuser-rTradeworker':
                $condition = true;

                if(isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                    for($j =0;$j<$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'];$j++){
                        if(!isset($_POST['homeuser-rTradeworker-work-type-'.$j]) || !isset($_POST['nTradeworkers-homeuser-rTradeworker-'.$j]) || !isset($_POST['job-description-homeuser-rTradeworker-'.$j])){
                            $condition = false;
                        }
                    }

                }
                else{
                    $condition = false;
                }

                if($condition){
                    if(isset($_POST['commencement-homeuser-rTradeworker']) && isset($_POST['homeuser-rTradeworker-street_number']) && isset($_POST['homeuser-rTradeworker-route']) && isset($_POST['homeuser-rTradeworker-sublocality_level_1']) && isset($_POST['homeuser-rTradeworker-locality']) && isset($_POST['homeuser-rTradeworker-administrative_area_level_1']) && isset($_POST['homeuser-rTradeworker-postal_code']) && isset($_POST['homeuser-rTradeworker-country']) && isset($_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker'])){
                        $condition = SebenzaServer::homeuserRequestTradeworkerAndroid([$_POST['commencement-homeuser-rTradeworker'],$_POST['homeuser-rTradeworker-street_number'],$_POST['homeuser-rTradeworker-route'],$_POST['homeuser-rTradeworker-sublocality_level_1'],$_POST['homeuser-rTradeworker-locality'],$_POST['homeuser-rTradeworker-administrative_area_level_1'],$_POST['homeuser-rTradeworker-postal_code'],$_POST['homeuser-rTradeworker-country'],$_POST['ignore-actual-nTradeworkers-homeuser-rTradeworker']],$_POST['android-UserID']);
//                        $condition = true;
                    }
                    else{
                        $condition = false;
                    }
                }

                $response = json_encode($condition);
                break;
            case 'android-homeuser-remove-request':
                //$response = json_encode("Should be removing the request from the server");
                if(isset($_POST['ignore-homeuser-selected-request-id']))
                {
                    $response = json_encode(SebenzaServer::homeuserStopRequest($_POST['ignore-homeuser-selected-request-id']));
                }else{
                    return json_encode(false);
                }
                break;
            case 'android-homeuser-initiateJob-request':
                if(isset($_POST['homeuser-initiateJob-commenceDate']) && isset($_POST['homeuser-initiateJob-numberDays']) && isset($_POST['homeuser-initiateJob-expectedPayment']) && isset($_POST['ignore-homeuser-initiateJob-quoteID'])){
                    $response = json_encode(SebenzaServer::homeuserInitiateJob($_POST['homeuser-initiateJob-commenceDate'],$_POST['homeuser-initiateJob-numberDays'],$_POST['homeuser-initiateJob-expectedPayment'],$_POST['ignore-homeuser-initiateJob-quoteID']));
                }
                else if(isset($_POST['homeuser-initiateJob-shortcut-commenceDate']) && isset($_POST['homeuser-initiateJob-shortcut-numberDays']) && isset($_POST['homeuser-initiateJob-shortcut-expectedPayment']) && isset($_POST['ignore-homeuser-initiateJob-shortcut-quoteID'])){
                    $response = json_encode(SebenzaServer::homeuserInitiateJob($_POST['homeuser-initiateJob-shortcut-commenceDate'],$_POST['homeuser-initiateJob-shortcut-numberDays'],$_POST['homeuser-initiateJob-shortcut-expectedPayment'],$_POST['ignore-homeuser-initiateJob-shortcut-quoteID']));
                }
                else{
                    $response = json_encode(false);
                }
                break ;
            default:
                //If the action was not one of the handled cases, respond appropriately
                $response = json_encode("Request not recognised.");
                break;
        }
    }
    echo $response;
//    var_dump(json_encode($_POST));
    //Flush the output buffer
    SebenzaServer::stop();
}